#%% Contents
# -----------------------------------------------------------------------------------------------
# ### Framework
# 1. Startup & Imports
# 2. Initialize App (i.e., the web app)
# 3. Global Program Elements (e.g. read in data and prep it)
# 4. Layout (i.e, the UI layout)
# 5. Callbacks (functions that respond to UI)
# 6. Run App
# -----------------------------------------------------------------------------------------------

#%% 1. STARTUP & IMPORTS

# standard library packages (included with python and always available)
import os, sys, datetime as dt
from pathlib import Path
import inspect
import requests
import io
from io import StringIO

print(f"[{dt.datetime.now().strftime('%Y%m%d_%H%M%S.%f')[:19]}] Starting {__name__}")
print(f"[{dt.datetime.now().strftime('%Y%m%d_%H%M%S.%f')[:19]}] cwd = {os.getcwd()}")
print(f"[{dt.datetime.now().strftime('%Y%m%d_%H%M%S.%f')[:19]}] {sys.path[:2] = }")
print(f"[{dt.datetime.now().strftime('%Y%m%d_%H%M%S.%f')[:19]}] {sys.version = }")

# Third party packages (ie, those installed with pip )
# NO NEED to import Dash or JupyterDash here.  That is done within fa.instantiate_app

from dash import html, dcc, Input, Output, State, dash_table
import dash_bootstrap_components as dbc  # Allows easy access to all bootstrap themes
import dash_daq as daq
import dash_auth
import numpy as np
import scipy as sp
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from flask import Flask, redirect

# private (fa) libraries
import lib.fa_dash_utils as fa

import pkg_resources as pkg
get_package_versions = [
    'plotly'
    ,'dash'
]
print('> Checking package versions:')
for PKG in get_package_versions:
    try:
        version = pkg.get_distribution(PKG).version
        print(f"  {PKG} {version}")
    except:
        print(f"  !{PKG} not found!")

#### PARAMETERS
prod                         = False   # Use when testing/dev mode to remove auth

#%% 2. INITIALIZE APP
###############################################################################################
# - App named here... if name is changed here, must also be changed elsewhere below
# - Either JupyterDash or just Dash for traditional .py program in Spyder. (Latter requires: 'from dash import Dash' above)
# - There are other dbc.themes (e.g. "SANDSTONE") and other options besides dash_bootstrap_components
###############################################################################################
app_title = 'Global Burden of Animal Disease'
external_stylesheets=[dbc.themes.BOOTSTRAP]
flask_server, app = fa.instantiate_app(app_title, external_stylesheets) # dont change name "flask_server".  Gunicorn expects to find it
gbadsDash = app  # an alias for app; the app name used within this program

if prod:
    ## USERNAMES AND PASSWORDS
    # Keep this out of source code repository - save in a file or a database
    VALID_USERNAME_PASSWORD_PAIRS = {
        'gbads': 'welcometogbads',
        'GBADS': "welcometogbads",
        'GBADs': "welcometogbads"
    }

    # BASIC AUTHORIZATION:  USERNAME:PASSWORD
    auth = dash_auth.BasicAuth(
        gbadsDash,
        VALID_USERNAME_PASSWORD_PAIRS
        )

app.config.suppress_callback_exceptions = True    # Use to remove warnings when assigning callbacks to components that are generated by other callbacks (and therefore not in the initial layout)

#%% 3. GLOBAL PROGRAM ELEMENTS
###############################################################################################
# - Global variables and functions that aren't directly involved in the UI interactivity (Callbacks)
# - Typical example would be functions that read, store, and prep data to be used in the app
###############################################################################################
# Define tab styles

# Tab styles
tab_style = {'font-size':"1.5625rem",
             'font-weight': 'bold',
             }

# Tab colors based on grouping
user_guide_tab_style ={
    'border-color': 'grey',
    'fontWeight': 'bold'
}

user_guide_tab_selected_style ={
    'border-color': 'grey',
    'fontWeight': 'bold'
}

# Heading styles
control_heading_style = {"font-weight": "bold",
                         "color": "#555555",
                         }

abbr_heading_style = {"font-weight": "bold",
                      "color": "#555555",
                      "font-size": "var(--pst-font-size-h5)",
                      }

# =============================================================================
#### Read data
# =============================================================================
# Define folder location
CWD = os.getcwd()
DASH_DATA_FOLDER = os.path.join(CWD ,'data')

# -----------------------------------------------------------------------------
#### -- Global AMU/AMR
# -----------------------------------------------------------------------------
amu2018_combined_tall = pd.read_csv(os.path.join(DASH_DATA_FOLDER, "amu2018_combined_tall.csv"))

# Create region labels with number of countries reporting
# amu2018_combined_tall["region_with_countries_reporting"] = \
#     amu2018_combined_tall['region'] + " (" + round(amu2018_combined_tall['number_of_countries'] ,0).astype(int).astype(str) + ")"

# Create region labels with proportion of biomass represented in countries reporting
amu2018_combined_tall["region_with_countries_reporting"] = \
    amu2018_combined_tall['region'] \
        + " (" + round(amu2018_combined_tall['number_of_countries'] ,0).astype(int).astype(str) \
        + " | " + round(amu2018_combined_tall['biomass_prpn_reporting'] * 100 ,1).astype(str) + "%)"

amu_combined_regional = pd.read_csv(os.path.join(DASH_DATA_FOLDER, "amu_combined_regional.csv"))
# amu_uncertainty_data = pd.read_csv(os.path.join(DASH_DATA_FOLDER, "amu_uncertainty_data.csv"))

# Antimicrobial resistance data
amr_withsmry = pd.read_csv(os.path.join(DASH_DATA_FOLDER, "amr_withsmry.csv"))

# -----------------------------------------------------------------------------
#### -- Denmark AMR
# -----------------------------------------------------------------------------
# Data for plotting
den_amr_ahle_final_poplvl = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'den_amr_ahle_final_poplvl.pkl.gz'))

# Wide format data for display
den_amr_ahle_final = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'den_amr_ahle_final.pkl.gz'))

# Replace column values to show in legend
# Note order here defines order in plot
legend_text_poplvl = {
    "amr_health_expenditure_at_pop_level_median":"Health expenditure associated with AMR",
    "amr_production_losses_at_pop_level_median":"Production losses associated with AMR",
    "amr_total_burden_at_pop_level_median":"AMR",      # Total AMR burden is the sum of health expenditure and production losses
    "ahle_at_pop_level_withoutamr_median":"Unattributed AHLE",
    }
den_amr_ahle_final_poplvl['metric'] = den_amr_ahle_final_poplvl['metric'].replace(legend_text_poplvl)

label_scenarios = {
    'Worse':'Worst',
    'Average':'Average',
    'Best':'Best',
    }
den_amr_ahle_final_poplvl['scenario'] = den_amr_ahle_final_poplvl['scenario'].replace(label_scenarios)
den_amr_ahle_final['scenario'] = den_amr_ahle_final['scenario'].replace(label_scenarios)

label_farmtypes = {
    "Breed":"Breeding"
    ,"Nurse":"Nursery"
    ,"Fat":"Fattening"
    ,"Total":"Overall"
    }
den_amr_ahle_final_poplvl['farm_type'] = den_amr_ahle_final_poplvl['farm_type'].replace(label_farmtypes)
den_amr_ahle_final['farm_type'] = den_amr_ahle_final['farm_type'].replace(label_farmtypes)

# Define custom sort order for columns
scenario_order = label_scenarios.values()  # Use ordering from dictionary
farm_type_order = label_farmtypes.values()  # Use ordering from dictionary
metric_order = legend_text_poplvl.values()  # Use ordering from dictionary

den_amr_ahle_final_poplvl_sorted = den_amr_ahle_final_poplvl.copy()
den_amr_ahle_final_poplvl_sorted['scenario'] = pd.Categorical(den_amr_ahle_final_poplvl_sorted['scenario'], categories=scenario_order, ordered=True)
den_amr_ahle_final_poplvl_sorted['farm_type'] = pd.Categorical(den_amr_ahle_final_poplvl_sorted['farm_type'], categories=farm_type_order, ordered=True)
den_amr_ahle_final_poplvl_sorted['metric'] = pd.Categorical(den_amr_ahle_final_poplvl_sorted['metric'], categories=metric_order, ordered=True)

# Scenario incidence rates
'''
All parameters for AMR modeling are in the following file provided by UoL:
    AMR attribution PWD DK Feb2025_old_method_ideal_v1.0.xlsx

The current plan is not to show these, but we may use the incidence rates
to label the selector for scenarios (worst, average, best):
    RiskPert(0.0065,0.0736,0.1942)
'''
# den_amr_scenarios = pd.DataFrame(
# 	{'Scenario': ['Worst', 'Average', 'Best']
# 	 ,'Disease Incidence': ['0.65%', '7.36%', '19.42%']
# 	}
#     )

# # OLD DATA
# den_amr_ahle = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'den_amr_ahle.pkl.gz'))
# den_amr_ahle_farmlvl = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'den_amr_ahle_farmlvl.pkl.gz'))
# den_amr_ahle_poplvl = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'den_amr_ahle_poplvl.pkl.gz'))

# # Replace column values to show in legend
# legend_text_farmlvl = {
#     "burden_of_amr_at_farm_level_median":"AMR"
#     ,"ahle_at_farm_level_median_withoutamr":"Unattributed AHLE"
#     }
# den_amr_ahle_farmlvl['metric'] = den_amr_ahle_farmlvl['metric'].replace(legend_text_farmlvl)

# legend_text_poplvl = {
#     "burden_of_amr_at_pop_level_median":"AMR"
#     ,"ahle_at_pop_level_median_withoutamr":"Unattributed AHLE"
#     }
# den_amr_ahle_poplvl['metric'] = den_amr_ahle_poplvl['metric'].replace(legend_text_poplvl)

# # Define custom sort order for columns
# scenario_order = ['Average', 'Worse', 'Best']
# farm_type_order = ['Breed', 'Nurse', 'Fat', 'Total']
# metric_order = ['AMR', 'Unattributed AHLE']

# den_amr_ahle_poplvl_sorted = den_amr_ahle_poplvl.copy()
# den_amr_ahle_poplvl_sorted['scenario'] = pd.Categorical(den_amr_ahle_poplvl_sorted['scenario'], categories=scenario_order, ordered=True)
# den_amr_ahle_poplvl_sorted['farm_type'] = pd.Categorical(den_amr_ahle_poplvl_sorted['farm_type'], categories=farm_type_order, ordered=True)
# den_amr_ahle_poplvl_sorted['metric'] = pd.Categorical(den_amr_ahle_poplvl_sorted['metric'], categories=metric_order, ordered=True)

# den_amr_ahle_farmlvl_sorted = den_amr_ahle_farmlvl.copy()
# den_amr_ahle_farmlvl_sorted['scenario'] = pd.Categorical(den_amr_ahle_farmlvl_sorted['scenario'], categories=scenario_order, ordered=True)
# den_amr_ahle_farmlvl_sorted['farm_type'] = pd.Categorical(den_amr_ahle_farmlvl_sorted['farm_type'], categories=farm_type_order, ordered=True)
# den_amr_ahle_farmlvl_sorted['metric'] = pd.Categorical(den_amr_ahle_farmlvl_sorted['metric'], categories=metric_order, ordered=True)

# -----------------------------------------------------------------------------
#### -- Ethiopia AMR
# -----------------------------------------------------------------------------
eth_amr = pd.read_pickle(os.path.join(DASH_DATA_FOLDER, 'eth_amr.pkl.gz'))

# Rename metrics for display
# Note order here defines order in plot and any metrics not listed will be dropped
legend_text_poplvl_eth = {
    # Used for plot
    "Indirect costs due to AMR":"Indirect costs associated with AMR",
    "Expenditure with resistant mastitis":"Health expenditure associated with AMR",
    "Production losses due to resistant mastitis":"Production losses associated with AMR",
    "AHLE without AMR":"Unattributed AHLE",

    # Shown in data table
    "Production losses due to mastitis":"Production losses due to mastitis",
    "Expenditure with mastitis":"Health expenditure due to mastitis",
    "AHLE - cattle":"Total AHLE",
    "Expenditure in cattle":"Total expenditure in cattle",
    "Total AMR burden":"Total AMR burden",
    }
eth_amr['metric'] = eth_amr['metric'].replace(legend_text_poplvl_eth)

keep_metrics_in_order = legend_text_poplvl_eth.values()     # Use ordering from dictionary
# _row_select = (eth_amr['metric'].isin(keep_metrics_in_order))
# eth_amr_sorted = eth_amr.loc[_row_select].copy()
eth_amr_sorted = eth_amr.copy()
eth_amr_sorted['metric'] = pd.Categorical(eth_amr_sorted['metric'], categories=keep_metrics_in_order, ordered=True)

# AMR metric
# Set each option to have hover over explanation
display_option_actual_burden = html.Abbr(
    "Actual burden",
    title="Actual value of production losses and health expenditure due to antimicrobial resistance",
    )

display_option_percent_ahle = html.Abbr(
    "Percentage of AHLE",
    title="AMR burden as percent of total AHLE",
    )

case_study_metric_options = [
    {'label': display_option_actual_burden, 'value': "Total", 'disabled': False},
    {'label': display_option_percent_ahle, 'value': "Percent", 'disabled': False},
    ]
case_study_metric_default = 'Total'

# =============================================================================
#### User options and defaults
# =============================================================================
# Region options
region_structure_options = [{'label': i, 'value': i, 'disabled': False} for i in ["WOAH",
                                                                       "FAO",
                                                                       "World Bank",]]

# WOAH regions - country aligments
WOAH_region_options_ga = [{'label': i, 'value': i, 'disabled': False} for i in ["All",
                                                                               "Africa",
                                                                               "Americas",
                                                                               "Asia, Far East and Oceania",
                                                                               "Europe",
                                                                               "Middle East"
                                                                               ]]

# =============================================================================
#### Antimicrobial Usage (AMU) options
# =============================================================================
# Map display
amu_map_display_options = [{'label': i, 'value': i, 'disabled': False} for i in ["Antimicrobial usage: tonnes",
                                                                                  "Antimicrobial usage: mg per kg biomass",
                                                                                  "Biomass",
                                                                                  "Antimicrobial Resistance (country level)",
                                                                                  "Drug Resistance Index (region level)",
                                                                                  "Antimicrobial expenditure: total",
                                                                                  "Antimicrobial expenditure: per kg biomass",]]


# Antimicrobial Class
amu_antimicrobial_class_options = []
for i in np.sort(amr_withsmry['antimicrobial_class'].unique()):
    str(amu_antimicrobial_class_options.append({'label':i,'value':(i)}))

# Pathogen
amu_pathogen_options = []
for i in np.sort(amr_withsmry['pathogen'].unique()):
    str(amu_pathogen_options.append({'label':i,'value':(i)}))

# Countries
case_study_country_options = [{'label': i, 'value': i, 'disabled': False} for i in ["Denmark",
                                                                                    "Ethiopia"]]
case_study_country_default = 'Denmark'

# Species
# These are now set in a callback
# case_study_species_options = [{'label': i, 'value': i, 'disabled': False} for i in ["Swine",
#                                                                                     "Dairy Cattle"]]

# Diseases
# These are now set in a callback
# case_study_disease_options = [
#     {"label":"Post-Weaning Diarrhoea (PWD)", "value":"Post-weaning diarrhea (PWD)"},
#     {"label":"Clinical Mastitis", "value":"Mastitis"},
#     ]
# case_study_disease_default = "Post-weaning diarrhea (PWD)"

# Scenarios
# This is used to create the scenario slider and in callbacks for reference
# Key: integer whose value determines location of mark on slider
# Value: string matching a scenario in the data
scenario_codes = {
    1: 'Worst',
    2: 'Average',
    3: 'Best',
    }
# Define label for each mark on the slider
scenario_code_marks = {
    1: '0.65%',
    2: '7.36%',
    3: '19.42%',
    }
scenario_code_default = 2

# Currency
# These are now set in a callback
# case_study_currency_options = [{'label': i, 'value': i, 'disabled': False} for i in ["DKK",
#                                                                                      "USD",
#                                                                                      "Birr"]]

# =============================================================================
#### Layout helper functions
# =============================================================================
def dcc_graph_element(
        ID:str              # Element ID. Use in callbacks.
        ,DL_FILENAME:str    # Filename to create if "download plot" button is clicked
        ,HEIGHT:int         # Height in pixels. Set to the same value for every element in a row.
    ):
    element = dcc.Graph(
        id=ID,
        style = {"height":f"{HEIGHT}px"},
        config = {
            "displayModeBar" : True,
            "displaylogo": False,
            'toImageButtonOptions': {
                'format': 'png', # one of png, svg, jpeg, webp
                'filename': DL_FILENAME
                },
            'modeBarButtonsToRemove': [
                'zoom',
                'zoomIn',
                'zoomOut',
                'autoScale',
                'pan',
                'select2d',
                'lasso2d',
                ]
            }
        )
    return element

# =============================================================================
#### Define the figures
# =============================================================================
def create_map_display_amu(input_df, value):
    # Add graphing country column for map
    input_df['graphing_country'] = 'TEST'
    input_df['graphing_country'] = np.where(input_df['region']=='Africa', 'Chad', input_df['graphing_country'])
    input_df['graphing_country'] = np.where(input_df['region']=='Americas', 'Guatemala', input_df['graphing_country'])
    input_df['graphing_country'] = np.where(input_df['region']=='Asia, Far East and Oceania', 'China', input_df['graphing_country'])
    input_df['graphing_country'] = np.where(input_df['region']=='Europe', 'Hungary', input_df['graphing_country'])
    input_df['graphing_country'] = np.where(input_df['region']=='Middle East', 'Saudi Arabia', input_df['graphing_country'])


    amu_map_fig = px.scatter_geo(input_df,
                                 locations="graphing_country",
                                 locationmode='country names',
                                 color="region",
                                 hover_name="region",
                                 size=value,
                                 projection="natural earth",
                                 custom_data=['region', value, 'number_of_countries'],
                                 color_discrete_map={"Asia, Far East and Oceania": 'rgb(102,197,204)',
                                                     "Americas": 'rgb(248,156,116)',
                                                     "Europe": 'rgb(220,176,242)',
                                                     "Africa": 'rgb(135,197,95)',
                                                     "Middle East": 'rgb(254,136,177)'}
                                 )

    return amu_map_fig

def create_donut_chart_amu(input_df, value, names):

    pie_fig = go.Figure(data=[go.Pie(labels=names,
                                      values=value,
                                      hovertemplate = "%{label}: <br>%{percent} </br><extra></extra>"
                                      )])

    # show % values inside
    pie_fig.update_traces(textposition='inside')
    pie_fig.update_layout(uniformtext_minsize=12, uniformtext_mode='hide')

    # Use `hole` to create a donut-like pie chart
    pie_fig.update_traces(hole=.4, hoverinfo="label+percent+name")

    # Sort legend based on data sort rather than pie values
    pie_fig.update_traces(sort=False)

    return pie_fig

def create_tree_map_amu(input_df, value, categories):
    tree_map_fig = px.treemap(input_df,
                              path=[px.Constant("Global"), 'region_with_countries_reporting', categories, 'antimicrobial_class'],
                              values=value,
                              maxdepth=3,
                              color='region',
                              # color_discrete_map={'(?)':'lightgrey', 'Africa':'#636FFA', 'Americas':'#EF553B', 'Asia, Far East and Oceania':'#00CC97', 'Europe':'#AB63FA', 'Middle East':'#FFC091'},
                              color_discrete_map={'(?)':'lightgrey', 'Africa':'rgb(135,197,95)', 'Americas':'rgb(248,156,116)', 'Asia, Far East and Oceania':'rgb(102,197,204)', 'Europe':'rgb(220,176,242)', 'Middle East':'rgb(254,136,177)'},
                              )

    # # Add value to bottom leaf node labels
    # tree_map_fig.data[0].textinfo = 'label+text+value'

    return tree_map_fig


# Denmark AMR bar chart - population level
# Using data update from March 5
def create_barchart_poplvl_den_amr(
        option_tot_pct
        ,option_axis_scale
        ,disease_select
        ,scenario_select_num
        ,farmtype_select
        ,currency_select
    ):
    scenario_select = scenario_codes[scenario_select_num]
    base_df = den_amr_ahle_final_poplvl_sorted.query(f"scenario == '{scenario_select}'")

    if currency_select == 'Danish Krone (DKK)':
        value_col = 'value_dkk'
        error_high_col = 'error_high_dkk'
        error_low_col = 'error_low_dkk'
        currency_label = 'DKK'
    elif currency_select == 'USD':
        value_col = 'value_usd'
        error_high_col = 'error_high_usd'
        error_low_col = 'error_low_usd'
        currency_label = 'USD'

    # Get important values to show in title
    population_amr_prod = base_df.query("farm_type == 'Overall'").query("metric == 'Production losses associated with AMR'")[value_col].item()
    population_amr_health = base_df.query("farm_type == 'Overall'").query("metric == 'Health expenditure associated with AMR'")[value_col].item()
    population_amr_total = population_amr_prod + population_amr_health
    population_unattr_ahle = base_df.query("farm_type == 'Overall'").query("metric == 'Unattributed AHLE'")[value_col].item()
    population_total_ahle = population_amr_total + population_unattr_ahle
    population_amr_prpn_ahle = population_amr_total / population_total_ahle

    if farmtype_select == 'total':
        input_df = base_df.query("farm_type == 'Overall'").copy()

        # Define color for each metric to use in plot
        # This also defines metrics to use
        legend_items = [
            {'label': 'Unattributed AHLE', 'color': '#fbc98e'},
            {'label': 'Production losses associated with AMR', 'color': '#31bff3'},
            {'label': 'Health expenditure associated with AMR', 'color': '#31f3be'},
        ]

        # Filter to appropriate metrics
        selected_metrics = [dct['label'] for dct in legend_items]
        _selected_rows = (input_df['metric'].isin(selected_metrics))
        input_df = input_df.loc[_selected_rows]

    elif farmtype_select == 'bytype':
        input_df = base_df.query("farm_type != 'Overall'").copy()

        # Define color for each metric to use in plot
        # This also defines metrics to use
        legend_items = [
            {'label': 'Unattributed AHLE', 'color': '#fbc98e'},
            {'label': 'AMR', 'color': '#31bff3'},
        ]

        # Filter to appropriate metrics
        selected_metrics = [dct['label'] for dct in legend_items]
        _selected_rows = (input_df['metric'].isin(selected_metrics))
        input_df = input_df.loc[_selected_rows]

    # Calculate cumulative values for plotly trick to overlay error bars
    input_df = input_df.sort_values(['scenario', 'farm_type', 'metric']).reset_index(drop=True)
    input_df['cumluative_value_over_metrics'] = input_df.groupby('farm_type')[value_col].cumsum()

    # Set axis scaling
    if option_axis_scale == 'Log':
        set_log_y = True
        layout_type = 'log'
    else:
        set_log_y = False
        layout_type = None

    # Plot actual burden (currency)
    if option_tot_pct == 'Total':
        traces = []
        unique_metrics = input_df['metric'].unique()

        for selected_metric in unique_metrics:
            metric_df = input_df.query(f"metric == '{selected_metric}'")
            metric_df['error_range_low'] = metric_df['cumluative_value_over_metrics'] - metric_df[error_low_col]
            metric_df['error_range_high'] = metric_df['cumluative_value_over_metrics'] + metric_df[error_high_col]

            # Create data bars
            traces.append(go.Bar(
                name=selected_metric,
                x=metric_df['farm_type'],
                y=metric_df[value_col],
                marker=dict(color=[dct['color'] for dct in legend_items if dct['label'] == selected_metric][0]),
                showlegend=False,
                hovertemplate=f"Production Stage: %{{x}}<br>Metric: {selected_metric}<br>Value: %{{y:,.0f}} {currency_label}<extra></extra>",
            ))

            # Add error whiskers
            traces.append(go.Scatter(
                name=f"{selected_metric}_error",
                x=metric_df['farm_type'],
                y=metric_df['cumluative_value_over_metrics'],
                mode='markers',
                marker=dict(color='gray'),
                error_y=dict(
                    type='data',
                    array=metric_df[error_high_col],
                    arrayminus=metric_df[error_low_col],
                    visible=True,
                    color='gray',
                    thickness=2,
                    width=5,
                ),
                showlegend=False,
                hovertemplate=f"Production Stage: %{{x}}<br>Metric: {selected_metric}<br>Value: %{{y:,.0f}} {currency_label}<br>Error Range: [%{{customdata[0]:,.0f}}, %{{customdata[1]:,.0f}}] {currency_label}<extra></extra>",
                customdata=metric_df[['error_range_low', 'error_range_high']].values,
            ))
        layout = go.Layout(
            title=dict(
                text=f"AHLE and the Burden of AMR in {disease_select}<br>" \
                    + f"{scenario_select} scenario<br>",
                font=dict(size=20),
                y=0.95,
            ),
            barmode='stack',
            xaxis={'title': 'Production Stage'},
            yaxis={
                'type': layout_type,
                'title':f'Burden ({currency_label})',
            },
            template='plotly_white',
            bargroupgap=0.5,
            margin=dict(r=320, t=100)
        )
        barchart_fig = go.Figure(data=traces, layout=layout)

        # Add total AHLE and AMR message
        barchart_fig.add_annotation(
            text=f"Total AHLE: {population_total_ahle:>16,.0f} {currency_label}",
            xref='paper',
            yref='paper',
            x=0,
            y=1.07,
            showarrow=False,
            font=dict(size=16),
            xanchor='left'
        )
        barchart_fig.add_annotation(
            text=f"AMR:            {population_amr_total:>16,.0f} {currency_label}  ({population_amr_prpn_ahle:.1%} of AHLE)",
            xref='paper',
            yref='paper',
            x=0,
            y=1.03,
            showarrow=False,
            font=dict(size=16),
            xanchor='left'
        )

        # Add custom legend annotations with colored squares
        y_pos = 0.95    # Starting y position for legend items

        # Legend title position
        legend_x = 1.02
        if layout.margin.r:
            legend_x = 1 + 0.005 * (layout.margin.r/30) # Decrease multiplier to move further left.

        barchart_fig.add_annotation(
            x=legend_x,
            y=y_pos + 0.05,
            xref="paper",
            yref="paper",
            text="Source of Burden",
            showarrow=False,
            font=dict(size=16, color="black"),
            xanchor="left",
            yanchor="top"
        )
        y_pos -= 0.05 # Move the start of the legend down after adding the title
        for item in legend_items:
            barchart_fig.add_shape(
                type="rect",
                x0=legend_x - 0.02,
                y0=y_pos - 0.02,
                x1=legend_x,
                y1=y_pos,
                xref="paper",
                yref="paper",
                fillcolor=item['color'],
                line=dict(color="black", width=1)
            )
            barchart_fig.add_annotation(
                x=legend_x + 0.01,
                y=y_pos - 0.01,
                xref="paper",
                yref="paper",
                text=item['label'],
                showarrow=False,
                font=dict(size=14),
                xanchor="left",
                yanchor="middle"
            )
            y_pos -= 0.05    # Adjust spacing between legend items

    # Plot % of AHLE
    elif option_tot_pct == 'Percent':
        # 100% stacked bars use histogram, which doesn't have error bar option
        barchart_fig = px.histogram(
            input_df,
            x='farm_type',
            y=value_col,
            log_y=set_log_y,
            color='metric',
            color_discrete_map={legend_item_dct['label']:legend_item_dct['color'] for legend_item_dct in legend_items},
            barnorm='percent',
            pattern_shape='farm_type',
            text_auto='.1f',
            )
        barchart_fig.update_layout(
            title_text=f'AHLE and the Burden of AMR in {disease_select}',
            font_size=15,
            xaxis_title='Production Stage',
        	yaxis_title='% of AHLE',
            showlegend=False,  # Hide the default legend
            margin=dict(r=320)  # Adjust right margin to account for custom legend
        )

        # Add custom legend annotations with colored squares
        y_pos = 0.95  # Starting y position for legend items

        # Legend title position
        barchart_fig.add_annotation(
            x=1.05,
            y=y_pos + 0.05,
            xref="paper",
            yref="paper",
            text="Source of Burden",
            showarrow=False,
            font=dict(size=16, color="black"),
            xanchor="left",
            yanchor="top"
        )
        y_pos -= 0.05 # Move the start of the legend down after adding the title
        for item in legend_items:
            barchart_fig.add_shape(
                type="rect",
                x0=1.02,
                y0=y_pos - 0.02,
                x1=1.04,
                y1=y_pos,
                xref="paper",
                yref="paper",
                fillcolor=item['color'],
                line=dict(color="black", width=1)
            )
            barchart_fig.add_annotation(
                x=1.05,
                y=y_pos - 0.01,
                xref="paper",
                yref="paper",
                text=item['label'],
                showarrow=False,
                font=dict(size=14),
                xanchor="left",
                yanchor="middle"
            )
            y_pos -= 0.05  # Adjust spacing between legend items

    return barchart_fig

# TODO create second bar showing Mastitis expenditure (instead of resistant Mastitis)
# Idea: create a reduced version of this function that can be used for both plots (lines 868-985 will be reused unchanged)
def create_barchart_poplvl_eth_amr(
        option_tot_pct
        ,option_axis_scale
        ,disease_select
        ,currency_select
    ):
    input_df = eth_amr_sorted

    if currency_select == 'USD':
        currency_label = 'USD'
        value_col = 'value_usd'
        error_high_col = 'error_high_usd'
        error_low_col = 'error_low_usd'
    elif currency_select == 'Ethiopian Birr (ETB)':
        currency_label = 'ETB'
        value_col = 'value_birr'
        error_high_col = 'error_high_birr'
        error_low_col = 'error_low_birr'

    # Get important values to show in title
    population_amr_prod = input_df.query("metric == 'Production losses associated with AMR'")[value_col].item()
    population_amr_health = input_df.query("metric == 'Health expenditure associated with AMR'")[value_col].item()
    population_amr_indirect = input_df.query("metric == 'Indirect costs associated with AMR'")[value_col].item()
    population_amr_total = population_amr_prod + population_amr_health + population_amr_indirect
    population_unattr_ahle = input_df.query("metric == 'Unattributed AHLE'")[value_col].item()
    population_total_ahle = population_amr_total + population_unattr_ahle
    population_amr_prpn_ahle = population_amr_total / population_total_ahle

    # Define color for each metric to use in plot
    # This also defines metrics to use
    legend_items = [
        {'label': 'Unattributed AHLE', 'color': '#fbc98e'},
        {'label': 'Production losses associated with AMR', 'color': '#31bff3'},
        {'label': 'Health expenditure associated with AMR', 'color': '#31f3be'},
        {'label': 'Indirect costs associated with AMR', 'color': '#c131f3'},
    ]

    # Filter to appropriate metrics
    selected_metrics = [dct['label'] for dct in legend_items]
    _selected_rows = (input_df['metric'].isin(selected_metrics))
    input_df = input_df.loc[_selected_rows]

    # Calculate cumulative values for plotly trick to overlay error bars
    input_df = input_df.sort_values(['production_system', 'metric']).reset_index(drop=True)
    input_df['cumluative_value_over_metrics'] = input_df.groupby('production_system')[value_col].cumsum()

    # Set axis scaling
    if option_axis_scale == 'Log':
        set_log_y = True
        layout_type = 'log'
    else:
        set_log_y = False
        layout_type = None

    # Plot actual burden (currency)
    if option_tot_pct == 'Total':
        traces = []
        unique_metrics = input_df['metric'].unique()

        for selected_metric in unique_metrics:
            metric_df = input_df.query(f"metric == '{selected_metric}'")
            metric_df['error_range_low'] = metric_df['cumluative_value_over_metrics'] - metric_df[error_low_col]
            metric_df['error_range_high'] = metric_df['cumluative_value_over_metrics'] + metric_df[error_high_col]

            # Create data bars
            traces.append(go.Bar(
                name=selected_metric,
                x=metric_df['production_system'],
                y=metric_df[value_col],
                marker=dict(color=[dct['color'] for dct in legend_items if dct['label'] == selected_metric][0]),
                showlegend=False,
                hovertemplate=f"Metric: {selected_metric}<br>Value: %{{y:,.0f}} {currency_label}<extra></extra>",
            ))

            # Add error whiskers
            traces.append(go.Scatter(
                name=f"{selected_metric}_error",
                x=metric_df['production_system'],
                y=metric_df['cumluative_value_over_metrics'],
                mode='markers',
                marker=dict(color='gray'),
                error_y=dict(
                    type='data',
                    array=metric_df[error_high_col],
                    arrayminus=metric_df[error_low_col],
                    visible=True,
                    color='gray',
                    thickness=2,
                    width=5
                ),
                showlegend=False,
                hovertemplate=f"Metric: {selected_metric}<br>Value: %{{y:,.0f}} {currency_label}<br>Error Range: [%{{customdata[0]:,.0f}}, %{{customdata[1]:,.0f}}] {currency_label}<extra></extra>",
                customdata=metric_df[['error_range_low', 'error_range_high']].values,
            ))
        layout = go.Layout(
            title=dict(
                text=f"AHLE and the Burden of AMR in {disease_select}",
                font=dict(size=20),
                y=0.95,
            ),
            barmode='stack',
            xaxis={'title': 'Production System'},
            yaxis={
                'type': layout_type,
                'title':f'Burden ({currency_label})',
            },
            template='plotly_white',
            bargroupgap=0.5,
            margin=dict(r=320, t=100)
        )
        barchart_fig = go.Figure(data=traces, layout=layout)

        # Add total AHLE and AMR message
        barchart_fig.add_annotation(
            text=f"Total AHLE: {population_total_ahle:>16,.0f} {currency_label}",
            xref='paper',
            yref='paper',
            x=0,
            y=1.07,
            showarrow=False,
            font=dict(size=16),
            xanchor='left'
        )
        barchart_fig.add_annotation(
            text=f"AMR:             {population_amr_total:>16,.0f} {currency_label}  ({population_amr_prpn_ahle:.1%} of AHLE)",
            xref='paper',
            yref='paper',
            x=0,
            y=1.03,
            showarrow=False,
            font=dict(size=16),
            xanchor='left'
        )

        # Add custom legend annotations with colored squares
        y_pos = 0.95    # Starting y position for legend items

        # Legend title position
        legend_x = 1.02
        if layout.margin.r:
            legend_x = 1 + 0.005 * (layout.margin.r/30) # Decrease multiplier to move further left.

        barchart_fig.add_annotation(
            x=legend_x,
            y=y_pos + 0.05,
            xref="paper",
            yref="paper",
            text="Source of Burden",
            showarrow=False,
            font=dict(size=16, color="black"),
            xanchor="left",
            yanchor="top"
        )
        y_pos -= 0.05 # Move the start of the legend down after adding the title
        for item in legend_items:
            barchart_fig.add_shape(
                type="rect",
                x0=legend_x - 0.02,
                y0=y_pos - 0.02,
                x1=legend_x,
                y1=y_pos,
                xref="paper",
                yref="paper",
                fillcolor=item['color'],
                line=dict(color="black", width=1)
            )
            barchart_fig.add_annotation(
                x=legend_x + 0.01,
                y=y_pos - 0.01,
                xref="paper",
                yref="paper",
                text=item['label'],
                showarrow=False,
                font=dict(size=14),
                xanchor="left",
                yanchor="middle"
            )
            y_pos -= 0.05    # Adjust spacing between legend items

    # Plot % of AHLE
    elif option_tot_pct == 'Percent':
        # 100% stacked bars use histogram, which doesn't have error bar option
        barchart_fig = px.histogram(
            input_df,
            x='production_system',
            y=value_col,
            log_y=set_log_y,
            color='metric',
            color_discrete_map={legend_item_dct['label']:legend_item_dct['color'] for legend_item_dct in legend_items},
            barnorm='percent',
            # pattern_shape='production_system',
            # pattern_shape_sequence=[".", "\\", "|"],
            text_auto='.1f',
            )
        barchart_fig.update_layout(
            title_text=f'AHLE and the Burden of AMR in {disease_select}',
            font_size=15,
            xaxis_title='Production System',
        	yaxis_title='% of AHLE',
            showlegend=False,  # Hide the default legend
            margin=dict(r=320)  # Adjust right margin to account for custom legend
        )

        # Add custom legend annotations with colored squares
        y_pos = 0.95  # Starting y position for legend items

        # Legend title position
        barchart_fig.add_annotation(
            x=1.05,
            y=y_pos + 0.05,
            xref="paper",
            yref="paper",
            text="Source of Burden",
            showarrow=False,
            font=dict(size=16, color="black"),
            xanchor="left",
            yanchor="top"
        )
        y_pos -= 0.05 # Move the start of the legend down after adding the title
        for item in legend_items:
            barchart_fig.add_shape(
                type="rect",
                x0=1.02,
                y0=y_pos - 0.02,
                x1=1.04,
                y1=y_pos,
                xref="paper",
                yref="paper",
                fillcolor=item['color'],
                line=dict(color="black", width=1)
            )
            barchart_fig.add_annotation(
                x=1.05,
                y=y_pos - 0.01,
                xref="paper",
                yref="paper",
                text=item['label'],
                showarrow=False,
                font=dict(size=14),
                xanchor="left",
                yanchor="middle"
            )
            y_pos -= 0.05  # Adjust spacing between legend items

    return barchart_fig

def create_case_study_piechart_den_poplvl(
        scenario_select_num,
        disease_select,
        currency_select,
        farmtype_select,
    ):
    scenario_select = scenario_codes[scenario_select_num]
    base_df = den_amr_ahle_final_poplvl_sorted.query(f"scenario == '{scenario_select}'")
    base_df = base_df.query("farm_type == 'Overall'")

    if currency_select == 'Danish Krone (DKK)':
        value_col = 'value_dkk'
        currency_label = 'DKK'
    elif currency_select == 'USD':
        value_col = 'value_usd'
        currency_label = 'USD'

    # Define color for each metric to use in plot
    legend_items = {
        'Unattributed AHLE': '#fbc98e',
        'Production losses associated with AMR': '#31bff3',
        'Health expenditure associated with AMR': '#31f3be',
    }
    # Filter to appropriate metrics
    selected_metrics = list(legend_items.keys())  # Get the keys from the dictionary
    _selected_rows = (base_df['metric'].isin(selected_metrics))
    base_df = base_df.loc[_selected_rows]

    if farmtype_select == 'total':
        base_df = base_df.query("farm_type == 'Overall'")
        # Create pie chart
        piechart_fig = go.Figure(data=[
            go.Pie(
                labels=base_df['metric'],
                values=base_df[value_col],
                textinfo='label+percent',
                rotation = -90,
                marker=dict(
                    colors=[legend_items[label] for label in base_df['metric']],
                ),
            )
        ])

    # elif farmtype_select == 'bytype':
    #     piechart_fig = make_subplots(rows=1, cols=3, specs=[[{'type':'domain'}, {'type':'domain'}]])

    #     piechart_fig.add_trace(go.Figure(data=[
    #         go.Pie(
    #             labels=base_df['metric'],
    #             values=base_df[value_col],
    #             textinfo='label+percent',
    #             rotation = -90,
    #             marker=dict(
    #                 colors=[legend_items[label] for label in base_df['metric']],
    #             ),
    #         )
    #     ]),
    #         1,1)

    #     piechart_fig.add_trace(go.Figure(data=[
    #         go.Pie(
    #             labels=base_df['metric'],
    #             values=base_df[value_col],
    #             textinfo='label+percent',
    #             rotation = -90,
    #             marker=dict(
    #                 colors=[legend_items[label] for label in base_df['metric']],
    #             ),
    #         )
    #     ]),
    #         1,2)

    #     piechart_fig.add_trace(go.Figure(data=[
    #         go.Pie(
    #             labels=base_df['metric'],
    #             values=base_df[value_col],
    #             textinfo='label+percent',
    #             rotation = -90,
    #             marker=dict(
    #                 colors=[legend_items[label] for label in base_df['metric']],
    #             ),
    #         )
    #     ]),
    #         1,3)

    piechart_fig.update_layout(
        title=dict(
            text=f"AHLE and the Burden of AMR in {disease_select}<br>" \
                + f"{scenario_select} scenario<br>",
            font=dict(size=20),
                )
            )

    return piechart_fig

def create_case_study_piechart_eth_poplvl(
        disease_select,
        currency_select,
    ):
    input_df = eth_amr_toplot

    if currency_select == 'USD':
        value_col = 'value_usd'
        currency_label = 'USD'
    elif currency_select == 'Ethiopian Birr (ETB)':
        value_col = 'value_birr'
        currency_label = 'ETB'

    # Define color for each metric to use in plot
    legend_items = {
        'Unattributed AHLE': '#fbc98e',
        'Production losses associated with AMR': '#31bff3',
        'Health expenditure associated with AMR': '#31f3be',
        'Indirect costs associated with AMR': '#c131f3',
    }

    # Create pie chart
    piechart_fig = go.Figure(data=[
        go.Pie(
            labels=input_df['metric'],
            values=input_df[value_col],
            textinfo='label+percent',
            rotation = -90,
            marker=dict(
                colors=[legend_items[label] for label in input_df['metric']],
            ),
        )
    ])

    piechart_fig.update_layout(
        title=dict(
            text=f"AHLE and the Burden of AMR in {disease_select}<br>",
            font=dict(size=20),
            )
        )

    return piechart_fig

#%% 4. LAYOUT
##################################################################################################
# Here we layout the webpage, including dcc (Dash Core Component) controls we want to use, such as dropdowns.
##################################################################################################
gbadsDash.layout = html.Div([
    #### BRANDING & HEADING
    dbc.Row([
        # GBADs Branding
        dbc.Col(
            html.Div([
                html.A(href="https://animalhealthmetrics.org/",
                       target='_blank',
                       children=[
                           html.Img(title="Link to GBADs site",
                                    src=os.environ.get("BASE_URL", "") + '/assets/GBADs-LOGO-Black-sm.png')
                           ]
                       ),
                # html.H5("Inclusiveness Challenge Delivery Rigour Transparency",
                html.H5("Global Burden of Animal Diseases",
                        style={"font-style": "italic",
                               "padding": "0",
                               "margin-bottom":"0rem !important"
                               }
                        ),
                ], style={'margin-left':"10px",
                            # "margin-bottom":"10px",
                            'margin-right':"10px",},
                )
            ),
        ### END OF BRANDING & HEADING
        ]),

    #### DASHBOARD TITLE
    dbc.Row([
        dbc.Col([
            # Dashboard title
            html.H1('Antimicrobial Usage & Resistance',
                    style={'color': '#F7931D',
                           "font-weight": "bold",
                           "justify-self": "center"}
                    ),
            ], xs=12, sm=12, md=12, lg=9, xl=9)
        ### END OF DASHBOARD TITLE
        ], justify='center'),

    #### Data to pass between callbacks
    dcc.Store(id='amu-regional-data'),

    #### TABS
    dbc.Tabs([

        #### USER GUIDE TAB
        dbc.Tab(label="User Guide & References",
                tabClassName="flex-grow-1 text-center",
                tab_style = tab_style,
                style = {"height":"100vh"},
                children=[
                    html.Iframe(src="assets/GBADs_Documentation/_build/html/index.html", # this is for the jupyter books
                                style={"width":"100%",
                                       "height":"3600px",   # Set large enough for your largest page and guide will use browser scroll bar. Otherwise, longer pages will get their own scroll bars.
                                       },
                                )
                    ]
                ),  ### END OF USER GUIDE TAB

        #### ANTIMICROBIAL USAGE TAB
        dbc.Tab(#label="Global Antimicrobial Usage (AMU)",
                label="Expenditure with Antimicrobial Usage (AMU)",
                id='AMU-tab',
                tabClassName="flex-grow-1 text-center",
                tab_style = tab_style,
                style = {"height":"100vh"},
                children=[
                    #### -- NAVIGATION BUTTONS
                    dbc.Row([
                        # Regional & Global AMU
                        dbc.Col([
                            dbc.NavbarBrand(dcc.Link(
                                dbc.Button(children='AMU by Region & Importance',
                                            # style={
                                            #     'display': 'inline-block',
                                            #     'align': 'center',
                                            #     'color': 'white',
                                            #     'fontSize': '15px ',
                                            #     'backgroundColor': '#101820',
                                            #     'width': '150px',
                                            #     'height': '50px',
                                            #     'marginLeft': '100px',
                                            #     'marginRight': '100px'
                                            # }
                                            ),

                                href='#AMU-Regional-Global',
                                refresh=True
                                )),
                            ]),

                        # Treemap & Map (Visualization of AMU, Biomass, AMR & AM Costs)
                        dbc.Col([
                            dbc.NavbarBrand(dcc.Link(
                                dbc.Button(children='Visualization of AMU, Biomass, AMR & AM Costs',
                                            # style={'color': 'white',
                                            #        'backgroundColor': '#101820',
                                            #        'fontSize': '15px ',
                                            #        'width': '150px',
                                            #        'height': '50px',
                                            #        'marginLeft': '10px',
                                            #        'marginRight': '100px',
                                            #        }
                                            ),
                                href='#AMU-Biomass-AMR-Costs-Viz',
                                refresh=True),
                                style={'justify-content':'center',
                                       'display':'flex'}
                                ),
                            ],width="auto"),

                        # Exploring AMU/price Variability
                        dbc.Col([
                            dbc.NavbarBrand(dcc.Link(
                                dbc.Button(children='Exploring AMU/price Variability',
                                            # style={'color': 'white',
                                            #        'backgroundColor': '#101820',
                                            #        'fontSize': '15px ',
                                            #        'width': '150px',
                                            #        'height': '50px',
                                            #        'marginLeft': '10px',
                                            #        'marginRight': '100px',
                                            #        }
                                            ),
                                href='#AMU-exploring-variability',
                                refresh=True),
                                style={'justify-content':'center',
                                       'display':'flex'}
                                ),
                            ]),

                        # Regional AM Expenditure Estimator
                        dbc.Col([
                            dbc.NavbarBrand(dcc.Link(
                                dbc.Button(children='Regional AM Expenditure Estimator',
                                            # style={'color': 'white',
                                            #        'backgroundColor': '#101820',
                                            #        'fontSize': '15px ',
                                            #        'width': '150px',
                                            #        'height': '50px',
                                            #        'marginLeft': '10px',
                                            #        'marginRight': '100px',
                                            #        }
                                            ),
                                href='#AMU-regional-expenditure',
                                refresh=True),
                                style={'justify-content':'center',
                                       'display':'flex'}
                                ),
                            ]),

                        # Data Export
                        dbc.Col([
                            dbc.NavbarBrand(dcc.Link(
                                dbc.Button(children='Data Export',
                                           # style=nav_btn_style,
                                           ),
                                href='#AMU-data-export', refresh=True),
                                style={'justify-content':'center',
                                       'display':'flex'}
                                ),
                            ],
                            style={
                                # TODO: Change colors in CSS
                                # "border":"2px #C5DAB8 solid",
                                }
                            ),

                        # dbc.NavbarSimple(
                        #     children=[
                        #         dbc.NavItem(dbc.NavLink("Regional & Global AMU", href="#AMU-Regional-Global",)),
                        #         dbc.DropdownMenu(
                        #             children=[
                        #                 dbc.DropdownMenuItem("More pages", header=True),
                        #                 dbc.DropdownMenuItem("Exploring AMU/price Variability", href="#AMU-exploring-variability",),
                        #                 dbc.DropdownMenuItem("Regional AM Expenditure Estimator", href="#AMU-regional-expenditure",),
                        #                 ],
                        #             nav=True,
                        #             in_navbar=True,
                        #             label="More",
                        #             ),
                        #         ],
                        #     brand="NavbarSimple",
                        #     # brand_href="#",
                        #     color="secondary",
                        #     dark=True,
                        #     ),

                        ],
                        justify='evenly',
                        style={
                             # 'position': 'fixed',
                             # 'z-index': '999', # Bring to front
                               },
                        ),  # END OF NAVIGATION BUTTONS ROW
                    html.Br(),

                    #### -- DROPDOWN CONTROLS
                    html.H3("Livestock Antimicrobial Usage by Region & Antimicrobial Importance/Classes",
                            id="AMU-Regional-Global",
                            style={"margin-bottom": ".07rem !important",
                                   }
                            ),
                    html.Label(['Displaying antimicrobial usage as reported to ',
                                html.A('WOAH (2018)', href='https://www.woah.org/app/uploads/2022/06/a-sixth-annual-report-amu-final.pdf')
                                ],
                               style={'font-style':'italic'}
                               ),
                    html.Br(),
                    dbc.Row([

                        # Bar Chart selection
                        dbc.Col([
                            html.H6("Regional AMU Bar Display"),
                            dcc.RadioItems(id='select-amu-graph',
                                           options=['Total', 'Percent'],
                                           value='Total',
                                           labelStyle={'display': 'block'},
                                           inputStyle={"margin-right": "10px"},
                                           ),
                            ]),

                        # Display quantity
                        dbc.Col([
                            html.H6("AMU Units"),
                            dcc.RadioItems(id='select-quantity-amu-tonnes',
                                           options=['Tonnes', 'mg per kg biomass'],
                                           value='Tonnes',
                                           labelStyle={'display': 'block'},
                                           inputStyle={"margin-right": "10px"},
                                           ),
                            ]),

                        # AMU classification
                        dbc.Col([
                            html.H6("Antimicrobial Grouping"),
                            dcc.Dropdown(id='select-classification-amu',
                                         options=[
                                             'Top Global Classes'
                                             ,'WHO Importance Categories'
                                             ,'WOAH Importance Categories'
                                             ,'OneHealth Importance Categories'
                                             ,'Individual Classes'
                                             ],
                                         value='Top Global Classes',
                                         clearable=False,
                                         ),
                            # Text underneath
                            html.P("See user guide for descriptions of importance categories" ,style={'font-style':'italic'}),
                            ]),

                        # Region-country alignment
                        # dbc.Col([
                        #     html.H6('Region-country alignment'),
                        #     dcc.RadioItems(id='Region-country-alignment-amu',
                        #                     options=region_structure_options,
                        #                     inputStyle={"margin-right": "10px", # This pulls the words off of the button
                        #                                 "margin-left":"20px"},
                        #                     value="WOAH",
                        #                     style={"margin-left":'-20px'}
                        #                     )
                        #         ]),

                        # Region
                        dbc.Col([
                            html.H6("Region"),
                            dcc.Dropdown(id='select-region-amu',
                                         options=WOAH_region_options_ga,
                                         value='All',
                                         clearable = False,
                                         ),
                            ]),

                        ], justify='evenly'),   # END OF CONTROLS ROW
                    html.Hr(style={'margin-right':'10px',}),

                    #### -- GRAPHICS PT.1
                    dbc.Row([
                        dbc.Col([ # AMU Stacked Bar
                            dbc.Spinner(children=[
                                dcc_graph_element(ID='amu-stacked-bar', DL_FILENAME='GBADs_AMU_Stacked_Bar', HEIGHT=650)
                                ], size="md", color="#393375", fullscreen=False),   # End of Spinner
                            ]),

                        dbc.Col([ # AMU Donut Chart
                            dbc.Spinner(children=[
                                dcc_graph_element(ID='amu-donut-chart', DL_FILENAME='GBADs_AMU_Donut', HEIGHT=650)
                                ],size="md", color="#393375", fullscreen=False),    # End of Spinner
                            ]),
                        ]),     # END OF FIRST GRAPHICS ROW

                    #### -- FOOTNOTES PT.1
                    dbc.Row([
                        dbc.Col([
                            html.P("Numbers in parenthesis show the number of countries in each region reporting to WOAH and the percent of region total biomass they represent.",
                                   style={'margin-bottom':0,}
                                   ),
                            ]),
                        dbc.Col([   # Empty column so footnotes line up with charts
                                 html.P("Click on an antimicrobial name/importance category in the legend to remove it from the visual"),
                            ]),
                        ],
                        style={'margin-left':"10px",
                               'font-style': 'italic',}
                        ),

                    html.Br(),

                    #### -- MAP/DRILLDOWN CONTROLS
                    dbc.Card([
                        dbc.CardBody([
                            html.H3("Visualization of Antimicrobial Usage, Resistance and Expenditure in Livestock by Region", id="AMU-Biomass-AMR-Costs-Viz",
                                    className="card-title"),

                    dbc.Row([
                        # Visualization Switch
                        dbc.Col([
                            html.H6("Global Visualization"),
                            dcc.RadioItems(id='select-viz-switch-amu',
                                          options=['Drill Down', 'Map'],
                                          value='Drill Down',
                                          labelStyle={'display': 'block'},
                                          inputStyle={"margin-right": "10px"},
                                          ),
                            ],  width=1),

                        # Map Display/Drill Down switch
                        dbc.Col([
                            html.H6("Map Display", id='select-map-display-drilldown-amu-title'),
                            dcc.Dropdown(id='select-map-display-drilldown-amu',
                                  clearable=False,
                                  ),
                            ]),


                    # Antimicrobial Class
                    dbc.Col([
                        html.H6("Antimicrobials", id='select-antimicrobial-importance-class-amu-title'),
                        dcc.Dropdown(id='select-antimicrobial-importance-class-amu',
                              value='Aminoglycosides',
                              clearable=False,
                              ),
                        ]),

                        # Pathogens
                        dbc.Col([
                            html.H6("Pathogen", id='select-pathogens-amu-title'),
                            dcc.Dropdown(id='select-pathogens-amu',
                                  options=amu_pathogen_options,
                                  value='All',
                                  clearable=False,
                                  ),
                            ]),

                    # END OF CARD OPTIONS ROW
                    ]),
                    dbc.Row([
                        html.P("Drill Down: show antimicrobial usage by region and importance category",
                               style={'font-style': 'italic',
                                      'margin-bottom':0,}),
                        html.P("Map: show antimicrobial usage, antimicrobial resistance, or antimicrobial expenditure on a world map",
                               style={'font-style': 'italic',
                                      'margin-bottom':0,}),
                        ]),

                    # END OF CARD BODY
                    ]),

                    ], color='#F2F2F2', style={"margin-right": "10px"}), # END OF CARD

                    html.Hr(style={'margin-right':'10px',}),

                    #### -- MAP / MOSAIC VIZ
                    dbc.Row([
                        dbc.Col([ # Global Aggregation Visual
                            dbc.Spinner(children=[
                            dcc.Graph(id='amu-map',
                                        style = {"height":"650px"},
                                      config = {
                                          "displayModeBar" : True,
                                          "displaylogo": False,
                                          'toImageButtonOptions': {
                                              'format': 'png', # one of png, svg, jpeg, webp
                                              'filename': 'GBADs_Global_AMU_Viz'
                                              },
                                          }
                                      )
                        # End of Spinner
                        ],size="md", color="#393375", fullscreen=False),
                        # End of Map
                        ]),

                     # END OF MAP/MOSAIC ROW
                    ]),
                    #### -- MAP/DRILLDOWN FOOTNOTES
                    dbc.Row([
                        dbc.Col([
                            html.P("Data sources for drill down and map are as follows:"),
                            html.P("Antimicrobial usage in tonnes or mg per kg bimoass: countries reporting total usage to WOAH (WOAH 2018)."),
                            html.P("Biomass: total biomass for countries reporting to WOAH (WOAH 2018)."),
                            html.P("Antimicrobial Resistance (country level): percent of pathogen positive samples for the selected pathogen that are resistant to the selected antimicrobial class (source: Venkateswaran et al., 2023)."),
                            html.P("Drug Resistance Index (region level): drug resistance index based on the average resistance rate across all antimicrobials tested in the region, weighted by the frequency of use of those antimicrobials. Using data from (Venkateswaran et al., 2023) and methods from (Laxminarayan 2011) and (EFSA AMR Indicators 2017). See the user guide for more details."),
                            html.P("Antimicrobial Expenditure in total USD or USD per kg biomass: calculated from antimicrobial usage and price selected below."),
                            ]),
                        ], style={'margin-left':"10px", 'font-style': 'italic'}
                        ),

                    #### -- GRAPHICS PT.2
                    # Separator for WOAH data above, estimates/variations below
                    html.Hr(style={'margin-right':'10px',}),
                    dbc.Row([
                        html.H3("Exploring Variability of Veterinary Antimicrobial Usage and Price by Data Source", id="AMU-exploring-variability"),
                        html.P("Use the charts and sliders below to compare illustrative antimicrobial usage and price variations. To facilitate comparison with other sources, antimicrobial usage reported to WOAH is extended to 2020 and extrapolated to cover whole regions. See the user guide for full descriptions of these estimates."),
                        ]),
                    # dbc.Row([
                    #     dbc.Col([
                    #         dbc.Card([
                    #             dbc.CardBody([html.H5("Antimicrobial usage estimates are produced for terrestrial livestock as follows:", className="card-title"),
                    #                           html.P("A*: Limited to countries reporting total antimicrobial usage to WOAH. Estimate for terrestrial livestock based on terrestrial biomass as a proportion of total biomass. Extended to 2020 by assuming the trend from 2016-2018 continues."),
                    #                           html.P("B*: Estimate A* extrapolated to whole region based on the proportion of terrestrial biomass for the region represented in the countries reporting."),
                    #                           html.P("C*: Whole-region estimate for terrestrial livestock from Mulchandani et. al. (https://journals.plos.org/globalpublichealth/article?id=10.1371/journal.pgph.0001305)."),
                    #                           ]),
                    #             ]),
                    #         ]),
                    #     dbc.Col([
                    #         dbc.Card([
                    #             dbc.CardBody([html.H5("Price estimates are from the following sources:", className="card-title"),
                    #                           html.P("A*: For Africa, the Americas, and the Middle East: the average price in Brazil (https://www.oecd-ilibrary.org/agriculture-and-food/antimicrobial-use-resistance-and-economic-benefits-and-costs-to-livestock-producers-in-brazil_27137b1e-en). For Asia, Far East and Oceania: the price of Tetracyclin in China (https://one.oecd.org/document/TAD/CA/APM/WP(2018)19/FINAL/En/pdf (page 25)). For Europe: https://animalhealtheurope.eu/about-us/annual-reports/2020-2/key-figures/."),
                    #                           html.P("B*: For Africa: 22% increase from price in Europe. For the Americas: midpoint between high and low estimates. For Asia, Far East and Oceania: . For Europe: . For the Middle East: 25% decrease from price in Europe."),
                    #                           html.P("C*: For Africa: 42% increase from price in Europe. For the Americas and Asia, Far East and Oceania: the average price reported in Europe. For Europe: . For the Middle East: 15% decrease from price in Europe."),
                    #                           ]),
                    #             ]),
                    #         ]),
                    #     ]),
                    # html.Br(),

                    #### -- CONTROL AND NOTE FOR USAGE AND PRICE CHARTS
                    dbc.Row([
                        # Usage units
                        dbc.Col([
                            html.H6("Display antimicrobial usage as:"),
                            dcc.RadioItems(id='select-usage-units-amu',
                                           options=['total tonnes', 'mg per kg biomass'],
                                           value='total tonnes',
                                           labelStyle={'display': 'inline-block'},
                                           inputStyle={"margin": "0 5px 0 15px",},
                                           ),
                            ]),
                        # # Note for prices
                        # dbc.Col([
                        #     html.P("*Click on 'A*', 'B*', or 'C*' to jump to those values.",
                        #            style={'font-weight': '600', 'font-style': 'italic'}),
                        #     ],
                        #     style={'margin-top': '30px',}, width=7,
                        #     ),
                        ]),

                    #### -- USAGE AND PRICE COMPARISON PLOTS
                    dbc.Row([
                        dbc.Col([    # Side-by-side bars comparing usage estimates for each region
                            dbc.Spinner(children=[
                                dcc_graph_element(ID='am-usage-comparison', DL_FILENAME='GBADs_AM_usage_comparison', HEIGHT=400)
                                 ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                            ]),
                        dbc.Col([    # Dots and error bars comparing price estimates for each region
                            dbc.Spinner(children=[
                                dcc_graph_element(ID='am-price-comparison', DL_FILENAME='GBADs_AM_price_comparison', HEIGHT=400)
                                ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                            ]),
                        ]),     # END OF USAGE AND PRICE PLOTS

                    #### -- FOOTNOTES PT.2
                    dbc.Row([
                        dbc.Col([
                            html.P("Bars represent usage from the following sources. Please refer to the user guide for details.",),
                            html.P("A*: Countries reporting 2018 data to WOAH, extended to 2020 by assuming the trend from 2016-2018 continues (source: WOAH 2018).",
                                   style={'margin-bottom':0,}
                                   ),
                            html.P("B*: Estimate A extended to whole region based on the proportion of region total biomass represented in the countries reporting (source: WOAH 2018).",
                                   style={'margin-bottom':0,}
                                   ),
                            html.P("C*: Region-total estimate from (Mulchandani et al., 2023).",
                                   style={'margin-bottom':0,}
                                   ),
                            ]),
                        dbc.Col([
                            html.P("Price points for antimicrobials were extracted from a range of sources. Extrapolations were made for regions where price data was not available. Please refer to the user guide for details."),
                            ]),
                        ], style={'margin-left':"10px",
                                  'font-style': 'italic',
                                  },
                        ),
                    html.Br(),

                    #### -- GRAPHICS PT.3
                    # Usage and Price Sliders with Expenditure chart
                    html.H3("Regional Veterinary Antimicrobial Expenditure Estimator", id="AMU-regional-expenditure"),

                    # Control and note for sliders and expenditure chart
                    dbc.Row([
                        # Expenditure units
                        dbc.Col([
                            html.H6("Display antimicrobial expenditure as:"),
                            dcc.RadioItems(id='select-expenditure-units-amu',
                                           options=['total', 'per kg biomass'],
                                           value='total',
                                           labelStyle={'display': 'inline-block'},
                                           inputStyle={"margin": "0 5px 0 15px",},
                                           ),
                            ]),
                        # Note for sliders
                        dbc.Col([
                            html.P("*Click on 'A*', 'B*', or 'C*' to jump to those values.",
                                   style={'font-weight': '600', 'font-style': 'italic'}
                                   ),
                            ], style={'margin-top': '30px',}, width=7,
                            ),
                        ]), # END OF ROW

                    # Gaphics Row
                    dbc.Row([
                        dbc.Col([
                            dbc.Spinner(children=[
                                dcc_graph_element(ID='amu-expenditure', DL_FILENAME='GBADs_AMU_Expenditure', HEIGHT=400)
                                ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                            ]),

                        # Price and Usage Sliders
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.H5("Estimated Antimicrobial Usage and Price for Terrestrial Livestock",
                                            className="card-title",
                                            style={"font-weight": "bold"}
                                            ),

                                    # Reset to midpoint button
                                    dbc.Col([
                                        html.Button('Reset to midpoint (B*)', id='reset-sliders-amu', n_clicks=0),
                                        ], style={'width': "auto",
                                                  'textAlign':'center',
                                                  'margin':'auto',
                                                  }
                                        ),

                                    dbc.Row([    # Region names
                                        dbc.Col([html.H5("Africa")]),
                                        dbc.Col([html.H5("Americas")]),
                                        dbc.Col([html.H5("Asia, Far East and Oceania")]),
                                        dbc.Col([html.H5("Europe")]),
                                        dbc.Col([html.H5("Middle East")]),
                                        ]),
                                    dbc.Spinner(children=[
                                        dbc.Row([
                                            dbc.Col([
                                                html.H6("Usage"),
                                                daq.Slider(
                                                    id='am-usage-slider-africa',
                                                    handleLabel={"showCurrentValue":
                                                                 True ,"label":"Tonnes",
                                                                 'style':{'fontSize':'1'}
                                                                 },
                                                    vertical=True,
                                                    color='rgb(135,197,95)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Price"),
                                                daq.Slider(
                                                    id='am-price-slider-africa',
                                                    handleLabel={"showCurrentValue":True ,"label":"USD per tonne"},
                                                    vertical=True,
                                                    color='rgb(135,197,95)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Usage"),
                                                daq.Slider(
                                                    id='am-usage-slider-americas',
                                                    handleLabel={"showCurrentValue":True ,"label":"Tonnes"},
                                                    vertical=True,
                                                    color='rgb(248,156,116)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Price"),
                                                daq.Slider(
                                                    id='am-price-slider-americas',
                                                    handleLabel={"showCurrentValue":True ,"label":"USD per tonne"},
                                                    vertical=True,
                                                    color='rgb(248,156,116)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Usage"),
                                                daq.Slider(
                                                    id='am-usage-slider-asia',
                                                    handleLabel={"showCurrentValue":True ,"label":"Tonnes"},
                                                    vertical=True,
                                                    color='rgb(102,197,204)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Price"),
                                                daq.Slider(
                                                    id='am-price-slider-asia',
                                                    handleLabel={"showCurrentValue":True ,"label":"USD per tonne"},
                                                    vertical=True,
                                                    color='rgb(102,197,204)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Usage"),
                                                daq.Slider(
                                                    id='am-usage-slider-europe',
                                                    handleLabel={"showCurrentValue":True ,"label":"Tonnes"},
                                                    vertical=True,
                                                    color='rgb(220,176,242)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Price"),
                                                daq.Slider(
                                                    id='am-price-slider-europe',
                                                    handleLabel={"showCurrentValue":True ,"label":"USD per tonne"},
                                                    vertical=True,
                                                    color='rgb(220,176,242)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Usage"),
                                                daq.Slider(
                                                    id='am-usage-slider-mideast',
                                                    handleLabel={"showCurrentValue":True ,"label":"Tonnes"},
                                                    vertical=True,
                                                    color='rgb(254,136,177)',
                                                    ),
                                                ]),
                                            dbc.Col([
                                                html.H6("Price"),
                                                daq.Slider(
                                                    id='am-price-slider-mideast',
                                                    handleLabel={"showCurrentValue":True ,"label":"USD per tonne"},
                                                    vertical=True,
                                                    color='rgb(254,136,177)',
                                                    ),
                                                ]),
                                            ]),
                                        ],size="md", color="#393375", fullscreen=False),     # End of spinner
                                    ]),     # End of card body
                                ]),     # End of card
                            ], width=7
                            ),  # End of col
                        ]),     # End of row

                        # # AMU for terrestrial animals, with uncertainty
                        # dbc.Row([
                        #     dbc.Col([
                        #         dbc.Spinner(children=[
                        #             dcc_graph_element(ID='amu-terr-error-usage', DL_FILENAME='GBADs_AMU_Terrestrial_Usage', HEIGHT=650)
                        #             ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                        #         ]),
                        #     dbc.Col([
                        #         dbc.Spinner(children=[
                        #             dcc_graph_element(ID='amu-terr-error-expenditure', DL_FILENAME='GBADs_AMU_Terrestrial_Expenditure', HEIGHT=650)
                        #             ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                        #         ]),
                        #     ]),

                #### -- DATATABLES
                html.Hr(style={'margin-right':'10px',}),
                html.H3("Data Export", id="AMU-data-export"),
                dbc.Row([
                    dbc.Spinner(children=[
                        dbc.Col([
                            html.Div([
                                html.Div(id='amu-2018-combined-tall-todisplay'),
                                ], style={'margin-left':"20px"}),
                            html.Br() # Space in between tables
                            ]), # END OF COL
                        ],size="md", color="#393375", fullscreen=False), # End of Spinner
                    ]),
                dbc.Row([
                    dbc.Spinner(children=[
                        dbc.Col([
                            html.Div([
                                html.Div(id='amu-regional-todisplay'),
                                ], style={'margin-left':"20px"}),
                            html.Br() # Spacer for bottom of page
                            ]),# END OF COL
                        ],size="md", color="#393375", fullscreen=False),     # End of Spinner
                    ]),
                dbc.Row([
                    dbc.Spinner(children=[
                        dbc.Col([
                            html.Div([
                                html.Div(id='amr-todisplay'),
                                ], style={'margin-left':"20px"}),
                            html.Br() # Spacer for bottom of page
                            ]),# END OF COL
                        ],size="md", color="#393375", fullscreen=False), # End of Spinner
                    ]),

                # Add naviagation button to top of page
                dbc.Row([
                    dbc.Col(html.Div([
                        html.A(href="#AMU-tab",
                               children=[
                                   html.Img(title="Back to top",src=os.environ.get("BASE_URL", "") + '/assets/up_arrow_icon_black-modified.png')
                                   ], style={'width':'80px'},
                               ),
                        ], style = {'margin-left':"10px",
                                   "margin-bottom":"10px",
                                   'margin-right':"10px",
                                   'position': 'fixed',
                                   'bottom':0,
                                   },
                        )),
                    ]),
                ]),     # END OF ANTIMICROBIAL USAGE TAB

            #### CASE STUDY TAB
            dbc.Tab(label="Country Case Studies",
                    tabClassName="flex-grow-1 text-center",
                    tab_style=tab_style,
                    style={"height":"100vh"},
                    children=[
                        #### -- COUNTRY/SPECIES/DISEASE SELECT
                        dbc.Row([
                            # Case Study Countries
                            dbc.Col([
                                html.H6("Countries",
                                        style={
                                            'text-align':'center',
                                            "font-weight": "bold",
                                            "color": "#555555",
                                            }),
                                dcc.Dropdown(id='select-case-study-countries-amu',
                                             options=case_study_country_options,
                                             value=case_study_country_default,
                                             clearable=False,
                                             ),
                                ],),
                            # Case Study Species
                            dbc.Col([
                                html.H6("Species",
                                        style={
                                            'text-align':'center',
                                            "font-weight": "bold",
                                            "color": "#555555",
                                            }),
                                dcc.Dropdown(id='select-case-study-species-amu',
                                             # Options and value are set in a callback
                                             clearable=False,
                                             ),
                                ],),
                            # Case Study Diseases
                            dbc.Col([
                                html.H6("Diseases",
                                        style={
                                            'text-align':'center',
                                            "font-weight": "bold",
                                            "color": "#555555",
                                            }),
                                dcc.Dropdown(id='select-case-study-diseases-amu',
                                             # Options and value are set in a callback
                                             clearable=False,
                                             ),
                                ],),
                        # END OF COUNTRY SELECT ROW
                        ], justify="evenly"),

                        html.Br(),

                        #### -- PAGE TITLE
                        dbc.Row([
                            html.Div(id='case-study-amu-title'),
                            ], justify="end"),
                        html.Hr(style={'margin-right':'10px',}),

                        # Row with collapse button
                        #### -- COLLAPSE BOX GRAPHICS CONTROLS
                        dbc.Row([
                            # Collapse Button
                            html.Div(
                                dbc.Button(
                                        id="tbl-btn-open-collapse-case-study-ctrl",
                                        color="primary",
                                        n_clicks=0,
                                        style={"margin-bottom": "0rem!important"}
                                    ),
                                id='table-collapse-button',
                                className='tab-section table-collapse-button',
                                ),
                        ]), #END OF COLLASPE BUTTON ROW

                        #### -- POPULATION LEVEL RESULTS
                        dbc.Row([
                            # # mosaic plot (treemap) at pop level
                            # dbc.Col([
                            #     dbc.Spinner(children=[
                            #         dcc_graph_element(ID='den-amr-treemap-poplvl', DL_FILENAME='GBADs_AMR_Den_Treemap_Poplevel', HEIGHT=650)
                            #         ],size="md", color="#393375", fullscreen=False), # End of Spinner
                            #     ]),
                            # sunburst chart at pop level
                            dbc.Col([
                                # dbc.Spinner(children=[
                                #     dcc_graph_element(ID='den-amr-sunburst-poplvl',
                                #                       DL_FILENAME='GBADs_AMR_Den_Sunburst_Poplevel',
                                #                       HEIGHT=650)
                                #     ],size="md", color="#393375", fullscreen=False), # End of Spinner
                                # Collapse
                                dbc.Collapse(
                                   dbc.Card([
                                       dbc.CardBody([
                                           html.H5("Population-level data",
                                                   id='case-study-graphics-ctrls-card-title',
                                                   className="card-title",
                                                   style={"font-weight": "bold"}
                                                   ),
                                           html.Label(id='case-study-collapse-card-description'),
                                           dbc.Row([
                                               # AMR Bar Display
                                               dbc.Col([
                                                   html.H6("AMR metric", style=control_heading_style),
                                                   dcc.RadioItems(id='select-case-study-amu-metric-display',
                                                                  options=case_study_metric_options,
                                                                  value=case_study_metric_default,
                                                                  labelStyle={'display': 'block'},
                                                                  inputStyle={"margin-right": "10px"},
                                                                  ),
                                                   ]),
                                               # Population or Farm Type display
                                               dbc.Col([
                                                   html.H6("Display", style=control_heading_style),
                                                   dcc.RadioItems(id='select-case-study-graphic-display-option',
                                                                  # Options and value are set in a callback
                                                                  labelStyle={'display': 'block'},
                                                                  inputStyle={"margin-right": "10px"},
                                                                  ),
                                                   ]),
                                               # Axis Display
                                               dbc.Col([
                                                   html.H6("Axis scale", style=control_heading_style),
                                                   dcc.RadioItems(id='select-case-study-amu-bar-scale',
                                                                  options=['Unit', 'Log'],
                                                                  value='Unit',
                                                                  labelStyle={'display': 'block'},
                                                                  inputStyle={"margin-right": "10px"},
                                                                  ),
                                                   ]),
                                               ]), # END OF ROW
                                           html.Br(),

                                           dbc.Row([
                                                # Currency Selector
                                                html.Div([
                                                    html.H6("Currency", style=control_heading_style),
                                                    dcc.Dropdown(id='select-case-study-currency-amu',
                                                                 # Options and value are set in a callback
                                                                 clearable=False,
                                                                 ),
                                                    ]),
                                               ]), # END OF ROW
                                           html.Br(),

                                           dbc.Row([
                                                # Incident Scenarios
                                                html.Div(id='select-scenario-den-amu-container', children=[
                                                    html.Abbr(#"Scenario (AMR incidence rate)",
                                                              "Incidence rate of resistance in PWD",
                                                              title="Scenarios correspond to different disease incidence rates for resistance in PWD.",
                                                              style=abbr_heading_style
                                                              ),
                                                    dcc.Slider(id='select-scenario-den-amu',
                                                               min=np.array(list(scenario_code_marks)).min(),
                                                               max=np.array(list(scenario_code_marks)).max(),
                                                               step=None,
                                                               marks=scenario_code_marks,
                                                               value=scenario_code_default,
                                                               # tooltip={
                                                               #     "placement": "top",
                                                               #     "always_visible": False,
                                                               #     },
                                                               ),
                                                    ], style= {'display': 'block'}),
                                           html.Br(),

                                           # dbc.Row([
                                           #     # Show AHLE and AMR numbers
                                           #     html.Div(id='den-ahle-amr-totals-printout')
                                               ]), # END OF ROW
                                           dbc.Row([
                                                # Footnotes
                                                    html.Div(id='case-study-ctrls-footnote-1'),
                                                    html.Div(id='case-stud-ctrls-footnote-2'),
                                               ]) # END OF ROW

                                           ]),    # END OF CARD BODY
                                       ], color='#F2F2F2'),    # END OF CARD

                                    id="collapse-case-study-graphics-controls",
                                    is_open=False,
                                    ), # END OF COLLAPSE
                                ], id='case-study-control-col'), # END OF CRTL COL

                            # bar chart at pop level
                            dbc.Col([
                                dbc.Spinner(children=[
                                    dcc_graph_element(ID='case-study-amr-barchart-poplvl',
                                                      DL_FILENAME='GBADs_AMR_Den_Barchart_PopLevel',
                                                      HEIGHT=650)
                                    ],size="md", color="#393375", fullscreen=False), # End of Spinner
                                # End of Bar chart at pop level
                                ]),
                            # END OF POPULATION LEVEL RESULTS
                            ]),

                        # #### -- FARM LEVEL RESULTS
                        # html.Hr(style={'margin-right':'10px',}),
                        # dbc.Button(
                        #     "Farm Level Results",
                        #     id="case-study-farm-level-collapse-button",
                        #     className="mb-3",
                        #     n_clicks=0,
                        #     ),
                        # dbc.Collapse( dbc.Row([
                        #     # # MOSAIC PLOT (TREEMAP) AT FARM LEVEL
                        #     # dbc.Col([
                        #     #     dbc.Spinner(children=[
                        #     #         dcc_graph_element(ID='den-amr-treemap-farmlvl', DL_FILENAME='GBADs_AMR_Den_Treemap_Farmlevel', HEIGHT=650)
                        #     #         ],size="md", color="#393375", fullscreen=False), # End of Spinner
                        #     #     ]),
                        #     # sunburst chart at farm level
                        #     dbc.Col([
                        #         dbc.Spinner(children=[
                        #             dcc_graph_element(ID='den-amr-sunburst-farmlvl', DL_FILENAME='GBADs_AMR_Den_Sunburst_Poplevel', HEIGHT=650)
                        #             ],size="md", color="#393375", fullscreen=False), # End of Spinner
                        #         ]),
                        #     # bar chart at farm level
                        #     dbc.Col([
                        #         dbc.Spinner(children=[
                        #             dcc_graph_element(ID='den-amr-barchart-farmlvl', DL_FILENAME='GBADs_AMR_Den_Barchart_FarmLevel', HEIGHT=650)
                        #             ],size="md", color="#393375", fullscreen=False), # End of Spinner
                        #         # End of bar chart at farm level
                        #         ]),
                        #     # END OF FARM LEVEL RESULTS
                        #     ]),
                        #     # END OF COLLAPSE
                        #     id="collapse",
                        #     is_open=False,
                        #     ),


                        # #### -- TESTING GRAPH ALTERNATIVES
                        # html.Hr(style={'margin-right':'10px',}),
                        # html.H3("Testing visuals", id="AMU-case-study-data-export"),
                        # dbc.Row([
                        #     dbc.Col([ # Pie Chart
                        #         dbc.Spinner(children=[
                        #             dcc_graph_element(ID='case-study-amr-piechart-poplvl', DL_FILENAME='GBADs_AMU_Stacked_Bar', HEIGHT=650)
                        #             ], size="md", color="#393375", fullscreen=False),   # End of Spinner
                        #         ]),

                        #     # dbc.Col([ # Waterfall Chart
                        #     #     dbc.Spinner(children=[
                        #     #         dcc_graph_element(ID='case-study-amr-waterfall-poplvl', DL_FILENAME='GBADs_AMU_Donut', HEIGHT=650)
                        #     #         ],size="md", color="#393375", fullscreen=False),    # End of Spinner
                        #     #     ]),

                        #     # dbc.Col([ # Bubble Plot
                        #     #     dbc.Spinner(children=[
                        #     #         dcc_graph_element(ID='case-study-amr-bubbleplot-poplvl', DL_FILENAME='GBADs_AMU_Bubble', HEIGHT=650)
                        #     #         ],size="md", color="#393375", fullscreen=False),    # End of Spinner
                        #     #     ]),
                        #     ]), # END OF ROW

                        #### -- DATATABLES
                        html.Hr(style={'margin-right':'10px',}),

                        html.H3("Data Export", id="AMU-case-study-data-export"),
                        dbc.Row([
                            dbc.Spinner(children=[
                                dbc.Col([
                                    html.Div([
                                        html.Div(id='AMU-case-study-data-todisplay'),
                                        ], style={'margin-left':"20px"}),
                                    html.Br() # Space in between tables
                                    ]), # END OF COL
                                ],size="md", color="#393375", fullscreen=False), # End of Spinner
                            ]),
                        # dbc.Row([
                        #     dbc.Spinner(children=[
                        #         dbc.Col([
                        #             html.Div([
                        #                 html.Div(id='den-scenario-table-todisplay'),
                        #                 ], style={'margin-left':"20px", "width":"25%"}),
                        #             html.Br() # Space in between tables
                        #             ]), # END OF COL
                        #         ],size="md", color="#393375", fullscreen=False), # End of Spinner
                        #     ]),
                    ]),     ### END OF CASE STUDY TAB

        ### END OF TABS ###
        ],style={'margin-right':'10px',
                 'margin-left': '10px'},
        )
    ])

#%% 5. CALLBACKS
# This section does the interactivity work with the web page
# - Listens to Inputs, linked to the id's of various web page elements in the LAYOUT
# - Changes the webpage with Outputs, also linked to the id's in the LAYOUT

# Version using multiple callbacks relies on passing data between them
# See https://dash.plotly.com/sharing-data-between-callbacks

# ==============================================================================
#### UPDATE ANTIMICROBIAL USE
# ==============================================================================
# ------------------------------------------------------------------------------
#### -- Controls
# ------------------------------------------------------------------------------
# Switch between Map Display and Drilldown
@gbadsDash.callback(
    Output('select-map-display-drilldown-amu','options'),
    Output('select-map-display-drilldown-amu','value'),
    Output('select-map-display-drilldown-amu-title','children'),
    Input('select-viz-switch-amu','value'),
    )
def update_map_display_drilldown_switch(viz_switch):
    if viz_switch == 'Map':
        options = amu_map_display_options
        value = 'Antimicrobial usage: tonnes'
        title = 'Map Display'
    else:
        options = ['Antimicrobial usage: tonnes', 'Antimicrobial usage: mg per kg biomass']
        value = 'Antimicrobial usage: mg per kg biomass'
        title = 'Drill Down Display'

    return options, value, title

# Switch between Importance categories and Antimicrobial class options
@gbadsDash.callback(
    Output('select-antimicrobial-importance-class-amu','options'),
    Output('select-antimicrobial-importance-class-amu','value'),
    Output('select-antimicrobial-importance-class-amu-title','children'),
    Output('select-antimicrobial-importance-class-amu','style'),
    Output('select-antimicrobial-importance-class-amu-title','style'),
    Input('select-map-display-drilldown-amu','value'),
    Input('select-viz-switch-amu','value'),
    )
def update_antimicrobial_importance_class_switch(display_option, viz_switch):
    if viz_switch == 'Drill Down':
        options =['OneHealth Importance Categories', 'WHO Importance Categories', 'WOAH Importance Categories']
        value = 'WOAH Importance Categories'
        title = 'Importance Categories'
        block = {'display': 'block'}
        # d['disabled']=False
    else:
        options = amu_antimicrobial_class_options.copy()
        for d in options:
            if display_option == 'Antimicrobial Resistance (country level)':
                block = {'display': 'block'}
                d['disabled']=False
                value = 'Aminoglycosides'
                title = 'Antimicrobials'
            else:
                block = {'display': 'none'} # hide antimicrobial class dropdown
                d['disabled']=True
                value = ''
                title = ''

    return options, value, title, block, block

# Enable the options for antibotics/pathogens when 'AMR' is selected
@gbadsDash.callback(
    # Output('select-antimicrobial-importance-class-amu','options'),
    # Output('select-antimicrobial-importance-class-amu','style'),
    # Output('select-antimicrobial-importance-class-amu-title','style'),
    Output('select-pathogens-amu','options'),
    Output('select-pathogens-amu','style'),
    Output('select-pathogens-amu-title','style'),
    Input('select-map-display-drilldown-amu','value'),
    Input('select-antimicrobial-importance-class-amu', 'value'),
    )
def update_map_amr_options(display_option, antimicrobial_class):
    # options1 = amu_antimicrobial_class_options.copy()
    options2 = amu_pathogen_options.copy()
    # for d in options1:
    #     if display_option == 'AMR':
    #         block = {'display': 'block'}
    #         d['disabled']=False
    #     else:
    #         block = {'display': 'none'} # hide antimicrobial class dropdown
    #         d['disabled']=True

    # Pathogen options
    for d in options2:

        if display_option == 'Antimicrobial Resistance (country level)':
            # Filter data based on antimicrobial class selected
            input_df=amr_withsmry.query(f"antimicrobial_class == '{antimicrobial_class}'")
            options2 = []
            for i in input_df['pathogen'].unique():
                str(options2.append({'label':i,'value':(i)}))

            block = {'display': 'block'}
            d['disabled']=False
        else:
            block = {'display': 'none'} # hide pathogen dropdown
            d['disabled']=True

    # return options1, block, block, options2, block, block
    return options2, block, block


# Output('select-pathogens-amu', 'options'),
#     Input('select-antimicrobial-importance-class-amu', 'value'),
#     )
# def update_pathogens_options_ga(antimicrobial_class):
#     input_df=amr_withsmry.query(f"antimicrobial_class == '{antimicrobial_class}'")
#     # Set options for pathogens based on the antimicrobial class selected
#     options = []
#     for i in input_df['pathogens'].unique():
#         str(options.append({'label':i,'value':(i)}))


# Usage and Price sliders
# am-usage-slider-africa
@gbadsDash.callback(
    Output('am-usage-slider-africa', 'min'),
    Output('am-usage-slider-africa', 'max'),
    Output('am-usage-slider-africa', 'value'),
    Output('am-usage-slider-africa', 'step'),
    Output('am-usage-slider-africa', 'marks'),

    Output('am-price-slider-africa', 'min'),
    Output('am-price-slider-africa', 'max'),
    Output('am-price-slider-africa', 'value'),
    Output('am-price-slider-africa', 'step'),
    Output('am-price-slider-africa', 'marks'),

    Output('am-usage-slider-americas', 'min'),
    Output('am-usage-slider-americas', 'max'),
    Output('am-usage-slider-americas', 'value'),
    Output('am-usage-slider-americas', 'step'),
    Output('am-usage-slider-americas', 'marks'),

    Output('am-price-slider-americas', 'min'),
    Output('am-price-slider-americas', 'max'),
    Output('am-price-slider-americas', 'value'),
    Output('am-price-slider-americas', 'step'),
    Output('am-price-slider-americas', 'marks'),

    Output('am-usage-slider-asia', 'min'),
    Output('am-usage-slider-asia', 'max'),
    Output('am-usage-slider-asia', 'value'),
    Output('am-usage-slider-asia', 'step'),
    Output('am-usage-slider-asia', 'marks'),

    Output('am-price-slider-asia', 'min'),
    Output('am-price-slider-asia', 'max'),
    Output('am-price-slider-asia', 'value'),
    Output('am-price-slider-asia', 'step'),
    Output('am-price-slider-asia', 'marks'),

    Output('am-usage-slider-europe', 'min'),
    Output('am-usage-slider-europe', 'max'),
    Output('am-usage-slider-europe', 'value'),
    Output('am-usage-slider-europe', 'step'),
    Output('am-usage-slider-europe', 'marks'),

    Output('am-price-slider-europe', 'min'),
    Output('am-price-slider-europe', 'max'),
    Output('am-price-slider-europe', 'value'),
    Output('am-price-slider-europe', 'step'),
    Output('am-price-slider-europe', 'marks'),

    Output('am-usage-slider-mideast', 'min'),
    Output('am-usage-slider-mideast', 'max'),
    Output('am-usage-slider-mideast', 'value'),
    Output('am-usage-slider-mideast', 'step'),
    Output('am-usage-slider-mideast', 'marks'),

    Output('am-price-slider-mideast', 'min'),
    Output('am-price-slider-mideast', 'max'),
    Output('am-price-slider-mideast', 'value'),
    Output('am-price-slider-mideast', 'step'),
    Output('am-price-slider-mideast', 'marks'),

    Input('reset-sliders-amu','n_clicks'),
    )
def update_usage_price_sliders(reset_button):
    regional_usage_price_data = amu_combined_regional.copy()


    # Steps will be the same for all
    usage_step = 1
    price_step = 1

    # Africa
    usage_africa_min = regional_usage_price_data.query("region == 'Africa'")['terr_amu_tonnes_reporting_2020'].values[0].astype(int)
    usage_africa_mid = regional_usage_price_data.query("region == 'Africa'")['terr_amu_tonnes_region_2020'].values[0].astype(int)
    usage_africa_max = regional_usage_price_data.query("region == 'Africa'")['terr_amu_tonnes_mulch_2020'].values[0].astype(int)
    usage_africa_marks = {
        usage_africa_min.astype(str):'A*',
        usage_africa_mid.astype(str):'B*',
        usage_africa_max.astype(str):'C*',
        # 'style':{'fontWeight': 'bold'}
        }

    price_africa_min = regional_usage_price_data.query("region == 'Africa'")['am_price_usdpertonne_low'].values[0].astype(int)
    price_africa_mid = regional_usage_price_data.query("region == 'Africa'")['am_price_usdpertonne_mid'].values[0].astype(int)
    price_africa_max = regional_usage_price_data.query("region == 'Africa'")['am_price_usdpertonne_high'].values[0].astype(int)
    price_africa_marks = {
        price_africa_min.astype(str):'Low'
        ,price_africa_mid.astype(str):'Med'
        ,price_africa_max.astype(str):'High'
        }

    # Americas
    usage_americas_min = regional_usage_price_data.query("region == 'Americas'")['terr_amu_tonnes_reporting_2020'].values[0].astype(int)
    usage_americas_mid = regional_usage_price_data.query("region == 'Americas'")['terr_amu_tonnes_region_2020'].values[0].astype(int)
    usage_americas_max = regional_usage_price_data.query("region == 'Americas'")['terr_amu_tonnes_mulch_2020'].values[0].astype(int)
    usage_americas_marks = {
        usage_americas_min.astype(str):'A*'
        ,usage_americas_mid.astype(str):'B*'
        ,usage_americas_max.astype(str):'C*'
        }

    price_americas_min = regional_usage_price_data.query("region == 'Americas'")['am_price_usdpertonne_low'].values[0].astype(int)
    price_americas_mid = regional_usage_price_data.query("region == 'Americas'")['am_price_usdpertonne_mid'].values[0].astype(int)
    price_americas_max = regional_usage_price_data.query("region == 'Americas'")['am_price_usdpertonne_high'].values[0].astype(int)
    price_americas_marks = {
        price_americas_min.astype(str):'Low'
        ,price_americas_mid.astype(str):'Med'
        ,price_americas_max.astype(str):'High'
        }

    # Asia, Far East and Oceania
    usage_asia_min = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['terr_amu_tonnes_reporting_2020'].values[0].astype(int)
    usage_asia_mid = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['terr_amu_tonnes_region_2020'].values[0].astype(int)
    usage_asia_max = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['terr_amu_tonnes_mulch_2020'].values[0].astype(int)
    usage_asia_marks = {
        usage_asia_min.astype(str):'A*'
        ,usage_asia_mid.astype(str):'B*'
        ,usage_asia_max.astype(str):'C*'
        }

    price_asia_min = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['am_price_usdpertonne_low'].values[0].astype(int)
    price_asia_mid = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['am_price_usdpertonne_mid'].values[0].astype(int)
    price_asia_max = regional_usage_price_data.query("region == 'Asia, Far East and Oceania'")['am_price_usdpertonne_high'].values[0].astype(int)
    price_asia_marks = {
        price_asia_min.astype(str):'Low'
        ,price_asia_mid.astype(str):'Med'
        ,price_asia_max.astype(str):'High'
        }

    # Europe
    usage_europe_min = regional_usage_price_data.query("region == 'Europe'")['terr_amu_tonnes_reporting_2020'].values[0].astype(int)
    usage_europe_mid = regional_usage_price_data.query("region == 'Europe'")['terr_amu_tonnes_region_2020'].values[0].astype(int)
    usage_europe_max = regional_usage_price_data.query("region == 'Europe'")['terr_amu_tonnes_mulch_2020'].values[0].astype(int)
    usage_europe_marks = {
        usage_europe_min.astype(str):'A*'
        ,usage_europe_mid.astype(str):'B*'
        ,usage_europe_max.astype(str):'C*'
        }

    price_europe_min = regional_usage_price_data.query("region == 'Europe'")['am_price_usdpertonne_low'].values[0].astype(int)
    price_europe_mid = regional_usage_price_data.query("region == 'Europe'")['am_price_usdpertonne_mid'].values[0].astype(int)
    price_europe_max = regional_usage_price_data.query("region == 'Europe'")['am_price_usdpertonne_high'].values[0].astype(int)
    price_europe_marks = {
        price_europe_min.astype(str):'Low'
        ,price_europe_mid.astype(str):'Med'
        ,price_europe_max.astype(str):'High'
        }

    # Middle East
    usage_mideast_min = regional_usage_price_data.query("region == 'Middle East'")['terr_amu_tonnes_reporting_2020'].values[0].astype(int)
    usage_mideast_mid = regional_usage_price_data.query("region == 'Middle East'")['terr_amu_tonnes_region_2020'].values[0].astype(int)
    usage_mideast_max = regional_usage_price_data.query("region == 'Middle East'")['terr_amu_tonnes_mulch_2020'].values[0].astype(int)
    usage_mideast_marks = {
        usage_mideast_min.astype(str):'A*'
        ,usage_mideast_mid.astype(str):'B*'
        ,usage_mideast_max.astype(str):'C*'
        }

    price_mideast_min = regional_usage_price_data.query("region == 'Middle East'")['am_price_usdpertonne_low'].values[0].astype(int)
    price_mideast_mid = regional_usage_price_data.query("region == 'Middle East'")['am_price_usdpertonne_mid'].values[0].astype(int)
    price_mideast_max = regional_usage_price_data.query("region == 'Middle East'")['am_price_usdpertonne_high'].values[0].astype(int)
    price_mideast_marks = {
        price_mideast_min.astype(str):'Low'
        ,price_mideast_mid.astype(str):'Med'
        ,price_mideast_max.astype(str):'High'
        }

    return usage_africa_min ,usage_africa_max ,usage_africa_mid ,usage_step ,usage_africa_marks \
        ,price_africa_min ,price_africa_max ,price_africa_mid ,price_step ,price_africa_marks \
        ,usage_americas_min ,usage_americas_max ,usage_americas_mid ,usage_step ,usage_americas_marks \
        ,price_americas_min ,price_americas_max ,price_americas_mid ,price_step ,price_americas_marks \
        ,usage_asia_min ,usage_asia_max ,usage_asia_mid ,usage_step ,usage_asia_marks \
        ,price_asia_min ,price_asia_max ,price_asia_mid ,price_step ,price_asia_marks \
        ,usage_europe_min ,usage_europe_max ,usage_europe_mid ,usage_step ,usage_europe_marks \
        ,price_europe_min ,price_europe_max ,price_europe_mid ,price_step ,price_europe_marks \
        ,usage_mideast_min ,usage_mideast_max ,usage_mideast_mid ,usage_step ,usage_mideast_marks \
        ,price_mideast_min ,price_mideast_max ,price_mideast_mid ,price_step ,price_mideast_marks

# # Update species options based on region and country selections
# @gbadsDash.callback(
#     Output('select-pathogens-amu', 'options'),
#     Input('select-antimicrobial-importance-class-amu', 'value'),
#     )
# def update_pathogens_options_ga(antimicrobial_class):
#     input_df=amr_withsmry.query(f"antimicrobial_class == '{antimicrobial_class}'")
#     # Set options for pathogens based on the antimicrobial class selected
#     options = []
#     for i in input_df['pathogens'].unique():
#         str(options.append({'label':i,'value':(i)}))

#     return options

# Update species options based on country selections
@gbadsDash.callback(
    Output('select-case-study-species-amu', 'options'),
    Output('select-case-study-species-amu', 'value'),
    Input('select-case-study-countries-amu', 'value'),
    )
def update_species_options_case_study(country_select):

    if country_select.upper() == 'DENMARK':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["Swine"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Dairy Cattle"]]

    elif country_select.upper() == 'ETHIOPIA':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["Dairy Cattle"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Swine"]]

    # Default is first value
    default = options[0]['value']

    return options, default

# Update species options based on country selections
@gbadsDash.callback(
    Output('select-case-study-diseases-amu', 'options'),
    Output('select-case-study-diseases-amu', 'value'),
    Input('select-case-study-countries-amu', 'value'),
    )
def update_diseases_options_case_study(country_select):

    if country_select.upper() == 'DENMARK':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["Post-Weaning Diarrhoea (PWD)"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Clinical Mastitis"]]

    elif country_select.upper() == 'ETHIOPIA':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["Clinical Mastitis"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Post-Weaning Diarrhoea (PWD)"]]

    # Default is first value
    default = options[0]['value']

    return options, default

# Update Case Study Title
@gbadsDash.callback(
    Output('case-study-amu-title','children'),
    Input('select-case-study-countries-amu','value'),
    Input('select-case-study-species-amu','value'),
    Input('select-case-study-diseases-amu','value'),
    )
def update_page_title_case_study(country_select, species_select, disease_select):
    if country_select.upper() == 'DENMARK':
        descriptor = 'the Danish Pig Sector'
        year = 2022
    elif country_select.upper() == 'ETHIOPIA':
        descriptor = 'Ethiopia Dairy Cattle'
        year = 2021
    title = [
        html.H3(f"Burden of Antimicrobial Resistance in {disease_select} in {descriptor}",
                style={'text-align':'center', "color": "#555555"}
                ),
        html.H4(f"{year}",
                style={'text-align':'center', "color": "#555555",}
                )
        ]
    return title

# # Collapse Farm Level results on case study tab
# @gbadsDash.callback(
#     Output("collapse", "is_open"),
#     [Input("case-study-farm-level-collapse-button", "n_clicks")],
#     [State("collapse", "is_open")],
# )
# def toggle_collapse(n, is_open):
#     if n:
#         return not is_open
#     return is_open

# Collapse AHLE graph controls
@app.callback(
    Output("collapse-case-study-graphics-controls", "is_open"),
    Output('tbl-btn-open-collapse-case-study-ctrl','children'),
    Output('case-study-control-col','width'),
    Input("tbl-btn-open-collapse-case-study-ctrl", "n_clicks"),
    State("collapse-case-study-graphics-controls", "is_open"),
)
def toggle_case_study_ctrls_collapse(n, is_open):
    open_collapse = 'Open'
    control_width = 1

    if n is None:
        return is_open, open_collapse, control_width

    if not is_open:
        open_collapse ='Collapse'
        control_width = 4

    return not is_open, open_collapse, control_width

# Update graph collapse box description
@app.callback(
    Output("case-study-collapse-card-description", "children"),
    Input('select-case-study-countries-amu', 'value'),
    Input('select-case-study-diseases-amu', 'value'),
)
def update_case_study_graph_description(country_select, disease_select):

    if country_select.upper() == 'DENMARK':
        graph_description = f'''
            Displaying the burden of AMR in {disease_select}.
            Use the controls below to display the burden in the selected currency or
            as a percentage of the total Animal Health Loss Envelope (AHLE).
            When displaying the burden by stage, note that it was assumed that there
            is no impact of AMR in PWD in the fattening stage.
            '''

    elif country_select.upper() == 'ETHIOPIA':
        graph_description = f'''
            Displaying the burden of AMR in {disease_select}.
            Use the controls below to display the burden in the selected currency or
            as a percentage of the total Animal Health Loss Envelope (AHLE).
            Compare {disease_select} to resistant {disease_select} with the side by side view.
            '''

    return graph_description

# Update display graph options based on country selection
@gbadsDash.callback(
    Output('select-case-study-graphic-display-option', 'options'),
    Output('select-case-study-graphic-display-option', 'value'),
    Input('select-case-study-countries-amu', 'value'),
    Input('select-case-study-diseases-amu', 'value'),
    )
def update_graphic_display_options_case_study(country_select, disease_select):

    if country_select.upper() == 'DENMARK':

        options = [{"label":'Overall', "value":"total"},
                   {"label":'By Production Stage', "value":"bytype"},
                   ]
        value = "total"
    elif country_select.upper() == 'ETHIOPIA':
        options = [{'label': i, 'value': i, 'disabled': False} for i in [f"AMR {disease_select}",
                                                                         "Side by Side"]]
        value = f"AMR {disease_select}"

    return options, value

# Update currency options based on country selection
@gbadsDash.callback(
    Output('select-case-study-currency-amu', 'options'),
    Output('select-case-study-currency-amu', 'value'),
    Input('select-case-study-countries-amu', 'value'),
    )
def update_currency_options_case_study(country_select):

    if country_select.upper() == 'DENMARK':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["Danish Krone (DKK)", "USD"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Ethiopian Birr (ETB)"]]
        value = "Danish Krone (DKK)"
    elif country_select.upper() == 'ETHIOPIA':
        options = [{'label': i, 'value': i, 'disabled': False} for i in ["USD", "Ethiopian Birr (ETB)"]]
        options += [{'label': i, 'value': i, 'disabled': True} for i in ["Danish Krone (DKK)"]]
        value = "USD"

    return options, value

# Hide Scenario selector when Ethiopia is selected
@gbadsDash.callback(
    Output('select-scenario-den-amu-container','style'),
    Input('select-case-study-countries-amu', 'value'),
    )
def toggle_scenarior_selector(country_select):

    if country_select.upper() == 'ETHIOPIA':
        return {'display':'none'}
    else:
        return {'display':'block'}

# ------------------------------------------------------------------------------
#### -- Data
# ------------------------------------------------------------------------------
# Update regional data
@gbadsDash.callback(
    Output('amu-regional-data', 'data'),
    Input('am-usage-slider-africa', 'value'),
    Input('am-price-slider-africa', 'value'),
    Input('am-usage-slider-americas', 'value'),
    Input('am-price-slider-americas', 'value'),
    Input('am-usage-slider-asia', 'value'),
    Input('am-price-slider-asia', 'value'),
    Input('am-usage-slider-europe', 'value'),
    Input('am-price-slider-europe', 'value'),
    Input('am-usage-slider-mideast', 'value'),
    Input('am-price-slider-mideast', 'value'),
    )
def update_regional_table_amu(
        usage_africa ,price_africa
        ,usage_americas ,price_americas
        ,usage_asia ,price_asia
        ,usage_europe ,price_europe
        ,usage_mideast ,price_mideast
    ):
    df = amu_combined_regional.copy()

    # Add selected usage and price values as columns
    df.loc[df['region'].str.contains('africa' ,case=False) ,['amu_terrestrial_tonnes_selected' ,'am_price_usdpertonne_selected']] = \
       [usage_africa ,price_africa]
    df.loc[df['region'].str.contains('americas' ,case=False) ,['amu_terrestrial_tonnes_selected' ,'am_price_usdpertonne_selected']] = \
        [usage_americas ,price_americas]
    df.loc[df['region'].str.contains('asia' ,case=False) ,['amu_terrestrial_tonnes_selected' ,'am_price_usdpertonne_selected']] = \
        [usage_asia ,price_asia]
    df.loc[df['region'].str.contains('europe' ,case=False) ,['amu_terrestrial_tonnes_selected' ,'am_price_usdpertonne_selected']] = \
        [usage_europe ,price_europe]
    df.loc[df['region'].str.contains('middle' ,case=False) ,['amu_terrestrial_tonnes_selected' ,'am_price_usdpertonne_selected']] = \
        [usage_mideast ,price_mideast]

    # Calculate expenditure based on usage and price slider input
    df['am_expenditure_usd_selected'] = df['amu_terrestrial_tonnes_selected'] * df['am_price_usdpertonne_selected']
    df['am_expenditure_usd_perkg_selected'] = df['am_expenditure_usd_selected'] / df['biomass_terr_kg_region']

    return df.to_json(date_format='iso', orient='split')

# Datatable below graphics
@gbadsDash.callback(
    Output('amu-2018-combined-tall-todisplay', 'children'),
    Input('select-species-ga','value'),
    )
def update_table_display_amu(dummy_input):
    display_data = amu2018_combined_tall.copy()

    # Filter out AGP
    display_data = display_data.query("scope != 'AGP'")

    columns_to_display_with_labels = {
       'region':'Region'
       ,'scope':'Scope'
       ,'number_of_countries':'Number of Countries Reporting'
       ,'biomass_total_kg_reporting':'Total Biomass in Countries Reporting (kg)'
       ,'biomass_total_kg_region':'Total Biomass in Region (kg)'
       ,'biomass_prpn_reporting':'Percent of Region Biomass in Countries Reporting'
       ,'antimicrobial_class': 'Antimicrobial Class'
       ,'who_importance_ctg':'WHO Importance Category'
       ,'woah_importance_ctg':'WOAH Importance Category'
       ,'onehealth_importance_ctg':'OneHealth Importance Category'
       ,'amu_tonnes': 'Total AM Usage (tonnes)'
       ,'amu_mg_perkgbiomass':'AM Usage (mg per kg biomass)'
    }

    # ------------------------------------------------------------------------------
    # Hover-over text
    # ------------------------------------------------------------------------------
    column_tooltips = {
        'who_importance_ctg':'Source: World Health Organization'
        ,'woah_importance_ctg':'Source: WOAH'
        ,'onehealth_importance_ctg':'Source: Venkateswaran et al., 2023'
        }

    # ------------------------------------------------------------------------------
    # Format data to display in the table
    # ------------------------------------------------------------------------------
    # Order does not matter in these lists
    # Zero decimal places
    display_data.update(display_data[[
        'biomass_total_kg_reporting'
        ,'biomass_total_kg_region'
    ]].map('{:,.0f}'.format))

    # One decimal place
    display_data.update(display_data[[
        'amu_tonnes'
    ]].map('{:,.1f}'.format))

    # Percent
    display_data.update(display_data[[
        'biomass_prpn_reporting'
    ]].map('{:,.1%}'.format))

    # Two decimal places
    display_data.update(display_data[[
        'amu_mg_perkgbiomass'
    ]].map('{:,.2f}'.format))

    return [
            html.H4("WOAH Antimicrobial Data 2018"),
            html.A("Source: WOAH 2018"
                   ,href='https://www.woah.org/app/uploads/2022/06/a-sixth-annual-report-amu-final.pdf'
                   ,style={'font-style':'italic'}),
            dash_table.DataTable(
                columns=[{"name": j, "id": i} for i, j in columns_to_display_with_labels.items()],
                # fixed_rows={'headers': True, 'data': 0},
                data=display_data.to_dict('records'),
                export_format="csv",
                sort_action='native',
                style_cell={
                    'font-family':'sans-serif',
                    },
                style_table={'overflowX': 'scroll',
                              'height': '350px',
                              'overflowY': 'auto'},
                page_action='none',

                # Hover-over for column headers
                tooltip_header=column_tooltips,
                tooltip_delay= 500,
                tooltip_duration=50000,

                # Underline columns with tooltips
                style_header_conditional=[{
                    'if': {'column_id': col},
                    'textDecoration': 'underline',
                    'textDecorationStyle': 'dotted',
                    } for col in list(column_tooltips)],
            )
        ]

# Regional data with Usage and Price
@gbadsDash.callback(
    Output('amu-regional-todisplay', 'children'),
    Input('amu-regional-data', 'data'),
    )
def update_regional_display_amu(input_json):
    display_data = pd.read_json(StringIO(input_json), orient='split')

    columns_to_display_with_labels = {
        'region':'Region'
        ,'number_of_countries':'Number of Countries'
        ,'total_antimicrobials_tonnes':'Total Antimicrobials for countries reporting (tonnes)'
        ,'biomass_total_kg_reporting':'Total Biomass for countries reporting'
        ,'biomass_total_kg_region':'Total Biomass for region'
        ,'biomass_terr_kg_reporting':'Terrestrial Biomass for countries reporting'
        ,'biomass_terr_kg_region':'Terrestrial Biomass for region'
        ,'biomass_terr_prpn_reporting':'Proportion of terrestrial biomass in countries reporting'
        ,'terr_amu_tonnes_reporting':'Estimated antimicrobials for terrestrial species in countries reporting 2018 (tonnes)'
        ,'prpn_change_2018to2020':'AM Usage Trend 2016 to 2018'
        ,'terr_amu_tonnes_reporting_2020':'Estimated antimicrobials for terrestrial species in countries reporting 2020 (tonnes)'
        ,'biomass_terr_reporting_prpnofregion':'Proportion of regional biomass'
        ,'terr_amu_tonnes_region_2020':'Estimated antimicrobials for terrestrial species in whole region 2020 (tonnes)'
        ,'terr_amu_tonnes_mulch_2020':'Estimated antimicrobials for terrestrial species from Mulchandani 2020 (tonnes)'
        ,'am_price_usdpertonne_low':'Average price of antimicrobials - Low (euros per tonne)'
        ,'am_price_usdpertonne_mid':'Average price of antimicrobials - Mid (euros per tonne)'
        ,'am_price_usdpertonne_high':'Average price of antimicrobials - High (euros per tonne)'

        ,'amu_terrestrial_tonnes_selected':'Antimicrobial usage - Selected (tonnes)'
        ,'am_price_usdpertonne_selected':'Average price of antimicrobials - Selected (USD per tonne)'
        ,'am_expenditure_usd_selected':'Expenditure on antimicrobials (USD)'

        ,'resistance_rate_wtavg':'Average antimicrobial resistance rate'
        ,'drug_resistance_index':'Drug resistance index'
        }

    # ------------------------------------------------------------------------------
    # Hover-over text
    # ------------------------------------------------------------------------------
    column_tooltips = {
        'terr_amu_tonnes_mulch_2020':'Source: Mulchandani et al., 2023'
        }

    # ------------------------------------------------------------------------------
    # Format data to display in the table
    # ------------------------------------------------------------------------------
    # Order does not matter in these lists
    # Zero decimal places
    columns_to_format = [
    'number_of_countries',
    'biomass_total_kg_reporting',
    'biomass_total_kg_region',
    'biomass_terr_kg_reporting',
    'biomass_terr_kg_region',
    'total_antimicrobials_tonnes',
    'terr_amu_tonnes_reporting',
    'terr_amu_tonnes_reporting_2020',
    'terr_amu_tonnes_region_2020',
    'terr_amu_tonnes_mulch_2020'
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0f}')

    # One decimal place
    # display_data.update(display_data[[
    # ]].map('{:,.1f}'.format))

    # Two decimal places
    columns_to_format = [
    'drug_resistance_index',
    'biomass_terr_prpn_reporting',
    'biomass_terr_reporting_prpnofregion'
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.2f}')

    # Percent
    columns_to_format = [
    'prpn_change_2018to2020',
    'resistance_rate_wtavg',
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0%}')

    # Euro currency
    # display_data.update(display_data[[
    #     'am_price_eurospertonne_low'
    #     ,'am_price_eurospertonne_mid'
    #     ,'am_price_eurospertonne_high'
    #     ,'am_expenditure_euros_selected'
    # ]].map('€ {:,.0f}'.format))

    # USD currency
    columns_to_format = [
    'am_price_usdpertonne_low',
    'am_price_usdpertonne_mid',
    'am_price_usdpertonne_high',
    'am_expenditure_usd_selected'
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0f}')

    return [
            html.H4("Extended Regional Data"),
            # html.P("Including regional estimates from Mulchandani et al., 2023. Contact the authors for national estimates." ,style={'font-style':'italic'}),
            # html.P(children=[
            #     html.P("Including regional estimates from Mulchandani et al., 2023. Contact the authors for national estimates."),
            #     html.A("Source: Mulchandani et al., 2023.", href='https://doi.org/10.1371/journal.pgph.0001305'),
            #     ],style={'font-style':'italic'}),

            html.Label(['Displaying antimicrobial usage as reported to ',
                        html.A('Mulchandani et al., 2023.',
                        href='https://doi.org/10.1371/journal.pgph.0001305'),
                        html.Label("Contact the authors for national estimates.")],
                        style={'font-style':'italic',
                               'margin-bottom':0,}),
            dash_table.DataTable(
                columns=[{"name": j, "id": i} for i, j in columns_to_display_with_labels.items()],
                # fixed_rows={'headers': True, 'data': 0},
                data=display_data.to_dict('records'),
                export_format="csv",
                sort_action='native',
                style_cell={
                    'font-family':'sans-serif',
                    },
                style_table={'overflowX':'scroll',
                              'overflowY': 'auto'},
                page_action='none',

                # Hover-over for column headers
                tooltip_header=column_tooltips,
                tooltip_delay= 500,
                tooltip_duration=50000,

                # Underline columns with tooltips
                style_header_conditional=[{
                    'if': {'column_id': col},
                    'textDecoration': 'underline',
                    'textDecorationStyle': 'dotted',
                    } for col in list(column_tooltips)],
            )
        ]

# Antimicrobial Resistance data
@gbadsDash.callback(
    Output('amr-todisplay', 'children'),
    Input('amu-regional-data', 'data'),
    )
def update_amr_display_amu(dummy_input):
    display_data = amr_withsmry.copy()

    columns_to_display_with_labels = {
        'woah_region':'Region'
        ,'location_name':'Country'
        ,'antimicrobial_class':'Antimicrobial Class'
        ,'pathogen':'Pathogen'
        ,'sum_isolates':'Number of Isolates'
        ,'overall_prev':'Percent Isolates Resistant'
        ,'reporting_year':'Reporting Year'
        }

    # ------------------------------------------------------------------------------
    # Format data to display in the table
    # ------------------------------------------------------------------------------
    # Order does not matter in these lists
    # Zero decimal places
    columns_to_format = [
        'sum_isolates',
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0f}')

    # One decimal place
    # display_data.update(display_data[[
    # ]].map('{:,.1f}'.format))

    # Two decimal places
    # display_data.update(display_data[[
    # ]].map('{:,.2f}'.format))

    # Percent
    columns_to_format = [
        'overall_prev',
    ]
    for column in columns_to_format:
        display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.1%}')

    return [
            html.H4("Antimicrobial Resistance Data"),
            dcc.Markdown(
                '''
                *Source: [resistancebank.org](https://resistancebank.org) and [Venkateswaran et al., 2023](https://ssrn.com/abstract=4346767)*
                '''
                ),
            dash_table.DataTable(
                columns=[{"name": j, "id": i} for i, j in columns_to_display_with_labels.items()],
                # fixed_rows={'headers': True, 'data': 0},
                data=display_data.to_dict('records'),
                export_format="csv",
                sort_action='native',
                style_cell={
                    'font-family':'sans-serif',
                    },
                style_table={'overflowX':'scroll',
                             'height': '350px',
                              'overflowY': 'auto'},
                page_action='none',
            )
        ]

# Usage and Price uncertainty data
# @gbadsDash.callback(
#     Output('amu-uncertainty-todisplay', 'children'),
#     Input('select-species-ga','value'),
#     )
# def update_uncertainty_display_amu(dummy_input):
#     display_data = amu_uncertainty_data.copy()

#     columns_to_display_with_labels = {
#        'region':'Region',
#        'n_countries':'Number of Countries',
#        'biomass_total_kg':'Total Biomass (kg)',
#        'biomass_total_terr_kg':'Terrestrial Livestock Biomass (kg)',

#        'amu_terrestrial_tonnes_min':'AMU tonnes (min)',
#        'amu_terrestrial_tonnes_mostlikely':'AMU tonnes (most likely)',
#        'amu_terrestrial_tonnes_max':'AMU tonnes (max)',
#        'tonnes_ci95_low':'AMU tonnes CI lower',
#        'tonnes_ci95_high':'AMU tonnes CI upper',
#        # 'amu_terrestrial_tonnes_distr':'',
#        # 'amu_terrestrial_tonnes_distr_lambda':'',
#        'amu_eurospertonne_min':'Euros per tonne (min)',
#        'amu_eurospertonne_mostlikely':'Euros per tonne (most likely)',
#        'amu_eurospertonne_max':'Euros per tonne (max)',
#        'price_ci95_low':'Euros per tonne CI lower',
#        'price_ci95_high':'Euros per tonne CI upper',
#        # 'amu_eurospertonne_distr':'',
#        # 'amu_eurospertonne_distr_lambda':'',
#        # 'amu_terrestrial_tonnes_errorlow':'',
#        # 'amu_terrestrial_tonnes_errorhigh':'',
#        # 'amu_eurospertonne_errorlow':'',
#        # 'amu_eurospertonne_errorhigh':'',
#        'expenditure_ci95_low':'Expenditure euros CI lower',
#        # 'expenditure_ci95_mid':'',
#        'expenditure_ci95_high':'Expenditure euros CI upper',
#        # 'amu_terrestrial_expenditure_midpoint':'',
#        # 'amu_terrestrial_expenditure_errorlow':'',
#        # 'amu_terrestrial_expenditure_errorhigh':''
#        }

#     # ------------------------------------------------------------------------------
#     # Format data to display in the table
#     # ------------------------------------------------------------------------------
#     # Order does not matter in these lists
#     # Zero decimal places
#     display_data.update(display_data[[
#         'n_countries'
#         ,'biomass_total_kg'
#         ,'biomass_total_terr_kg'
#         ,'amu_terrestrial_tonnes_min'
#         ,'amu_terrestrial_tonnes_mostlikely'
#         ,'amu_terrestrial_tonnes_max'
#         ,'tonnes_ci95_low'
#         ,'tonnes_ci95_high'
#     ]].map('{:,.0f}'.format))

#     # One decimal place
#     display_data.update(display_data[[
#     ]].map('{:,.1f}'.format))

#     # Two decimal places
#     display_data.update(display_data[[
#        'amu_eurospertonne_min'
#        ,'amu_eurospertonne_mostlikely'
#        ,'amu_eurospertonne_max'
#        ,'price_ci95_low'
#        ,'price_ci95_high'
#        ,'expenditure_ci95_low'
#        ,'expenditure_ci95_high'
#     ]].map('€ {:,.2f}'.format))

#     # ------------------------------------------------------------------------------
#     # Hover-over text
#     # ------------------------------------------------------------------------------
#     column_tooltips = {
#         # 'amu_terrestrial_tonnes_min':'Estimated from WOAH region total AMU based on terrestrial biomass as proportion of total biomass.'
#         # ,'amu_terrestrial_tonnes_mostlikely':'Source: Mulchandani et. al.'
#         # ,'amu_terrestrial_tonnes_max':'Estimated as 10% higher than most likely value'
#         'tonnes_ci95_low':'Based on PERT distribution'
#         ,'tonnes_ci95_high':'Based on PERT distribution'

#         # ,'amu_eurospertonne_min':'Source:'
#         # ,'amu_eurospertonne_mostlikely':'Source:'
#         # ,'amu_eurospertonne_max':'Source:'
#         ,'price_ci95_low':'Based on PERT distribution'
#         ,'price_ci95_high':'Based on PERT distribution'
#         }

#     return [
#             html.H4("Terrestrial Livestock Estimates"),
#             dash_table.DataTable(
#                 columns=[{"name": j, "id": i} for i, j in columns_to_display_with_labels.items()],
#                 # fixed_rows={'headers': True, 'data': 0},
#                 data=display_data.to_dict('records'),
#                 export_format="csv",
#                 sort_action='native',
#                 style_cell={
#                     'font-family':'sans-serif',
#                     },
#                 style_table={'overflowX':'scroll',
#                               'overflowY': 'auto'},
#                 page_action='none',

#                 # Hover-over for column headers
#                 tooltip_header=column_tooltips,
#                 tooltip_delay= 500,
#                 tooltip_duration=50000,

#                 # Underline columns with tooltips
#                 style_header_conditional=[{
#                     'if': {'column_id': col},
#                     'textDecoration': 'underline',
#                     'textDecorationStyle': 'dotted',
#                     } for col in list(column_tooltips)],
#             )
#         ]

# Case study data
@gbadsDash.callback(
    Output('AMU-case-study-data-todisplay', 'children'),
    Input('select-case-study-countries-amu', 'value'),
    )
def update_case_study_table(country_select):
    if country_select == 'Denmark':
        display_data = den_amr_ahle_final.copy()

        columns_to_display_with_labels = {
            'scenario':"Scenario",
            'farm_type':"Production Stage",
            'number_of_farms':"Number of Farms",
            'amr_production_losses_at_farm_level_median':"Production losses associated with AMR at the Farm level (median) (DKK)",
            'amr_production_losses_at_farm_level_5_pct_ile':"Production losses associated with AMR at the Farm level (5%) (DKK)",
            'amr_production_losses_at_farm_level_95_pct_ile':"Production losses associated with AMR at the Farm level (95%) (DKK)",
            'amr_production_losses_at_pop_level_median':"Production losses associated with AMR at the Population level (median) (DKK)",
            'amr_production_losses_at_pop_level_5_pct_ile':"Production losses associated with AMR at the Population level (5%) (DKK)",
            'amr_production_losses_at_pop_level_95_pct_ile':"Production losses associated with AMR at the Population level (95%) (DKK)",
            'amr_health_expenditure_at_pop_level_median':"Health expenditure associated with AMR at the Population level (median) (DKK)",
            'amr_health_expenditure_at_pop_level_5_pct_ile':"Health expenditure associated with AMR at the Population level (5%) (DKK)",
            'amr_health_expenditure_at_pop_level_95_pct_ile':"Health expenditure associated with AMR at the Population level (95%) (DKK)",
            'amr_total_burden_at_pop_level_median':"Total burden of AMR at the Population level (median) (DKK)",
            'amr_total_burden_at_pop_level_5_pct_ile':"Total burden of AMR at the Population level (5%) (DKK)",
            'amr_total_burden_at_pop_level_95_pct_ile':"Total burden of AMR at the Population level (95%) (DKK)",
            # 'production_stage':"",
            'population_ahle_median':"Total AHLE at the Population level (median) (DKK)",
            'population_ahle_5_pct__percentile':"Total AHLE at the Population level (5%) (DKK)",
            'population_ahle_95_pct__percentile':"Total AHLE at the Population level (95%) (DKK)",
            # 'ahle_at_pop_level_withoutamr_median':"",
            # 'ahle_at_pop_level_withoutamr_errhigh':"",
            # 'ahle_at_pop_level_withoutamr_errlow':"",
            # 'amr_production_losses_at_pop_level_errhigh':"",
            # 'amr_production_losses_at_pop_level_errlow':"",
            # 'amr_health_expenditure_at_pop_level_errhigh':"",
            # 'amr_health_expenditure_at_pop_level_errlow':"",
            # 'amr_total_burden_at_pop_level_errhigh':"",
            # 'amr_total_burden_at_pop_level_errlow':"",
            # 'amr_total_burden_at_pop_level_median_pctofahle':"",
            # 'amr_total_burden_at_pop_level_5pctile_pctofahle':"",
            # 'amr_total_burden_at_pop_level_95pctile_pctofahle':"",
            }

        # Remove rows for fattening farms as these are all zero (not estimated)
        display_data = display_data.query("farm_type != 'Fattening'")

        # ------------------------------------------------------------------------------
        # Hover-over text
        # ------------------------------------------------------------------------------
        column_tooltips = {
            'scenario':"Scenario",
            'farm_type':"Production Stage",
            'number_of_farms':"Number of Farms",
            # 'amr_production_losses_at_farm_level_median':"",
            # 'amr_production_losses_at_farm_level_5_pct_ile':"",
            # 'amr_production_losses_at_farm_level_95_pct_ile':"",
            # 'amr_production_losses_at_pop_level_median':"",
            # 'amr_production_losses_at_pop_level_5_pct_ile':"",
            # 'amr_production_losses_at_pop_level_95_pct_ile':"",
            # 'amr_health_expenditure_at_pop_level_median':"",
            # 'amr_health_expenditure_at_pop_level_5_pct_ile':"",
            # 'amr_health_expenditure_at_pop_level_95_pct_ile':"",
            # 'amr_total_burden_at_pop_level_median':"",
            # 'amr_total_burden_at_pop_level_5_pct_ile':"",
            # 'amr_total_burden_at_pop_level_95_pct_ile':"",
            # 'production_stage':"",
            # 'population_ahle_median':"",
            # 'population_ahle_5_pct__percentile':"",
            # 'population_ahle_95_pct__percentile':"",
            # 'ahle_at_pop_level_withoutamr_median':"",
            # 'ahle_at_pop_level_withoutamr_errhigh':"",
            # 'ahle_at_pop_level_withoutamr_errlow':"",
            # 'amr_production_losses_at_pop_level_errhigh':"",
            # 'amr_production_losses_at_pop_level_errlow':"",
            # 'amr_health_expenditure_at_pop_level_errhigh':"",
            # 'amr_health_expenditure_at_pop_level_errlow':"",
            # 'amr_total_burden_at_pop_level_errhigh':"",
            # 'amr_total_burden_at_pop_level_errlow':"",
            # 'amr_total_burden_at_pop_level_median_pctofahle':"",
            # 'amr_total_burden_at_pop_level_5pctile_pctofahle':"",
            # 'amr_total_burden_at_pop_level_95pctile_pctofahle':"",
            }

        # ------------------------------------------------------------------------------
        # Format data to display in the table
        # ------------------------------------------------------------------------------
        # Order does not matter in these lists
        # Zero decimal places
        columns_to_format = [
            'number_of_farms',
        ]
        for column in columns_to_format:
            display_data[column] = display_data[column].apply(lambda x: f'{x:,.0f}')

        # Percent
        # columns_to_format = [
        #     'prpn_change_2018to2020',
        #     'resistance_rate_wtavg',
        # ]
        # for column in columns_to_format:
        #     display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0%}')

        # DKK currency
        columns_to_format = [
            'amr_production_losses_at_farm_level_median',
            'amr_production_losses_at_farm_level_5_pct_ile',
            'amr_production_losses_at_farm_level_95_pct_ile',
            'amr_production_losses_at_pop_level_median',
            'amr_production_losses_at_pop_level_5_pct_ile',
            'amr_production_losses_at_pop_level_95_pct_ile',
            'amr_health_expenditure_at_pop_level_median',
            'amr_health_expenditure_at_pop_level_5_pct_ile',
            'amr_health_expenditure_at_pop_level_95_pct_ile',
            'amr_total_burden_at_pop_level_median',
            'amr_total_burden_at_pop_level_5_pct_ile',
            'amr_total_burden_at_pop_level_95_pct_ile',
            'population_ahle_median',
            'population_ahle_5_pct__percentile',
            'population_ahle_95_pct__percentile',
        ]
        for column in columns_to_format:
            display_data[column] = display_data[column].apply(lambda x: '<not estimated>' if str(x) == 'nan' else f'DKK {x:,.0f}')

        # USD currency
        # columns_to_format = [
        #     'value_usd',
        # ]
        # for column in columns_to_format:
        #     display_data[column] = display_data[column].apply(lambda x: f'$ {x:,.0f}')

    elif country_select == 'Ethiopia':
        display_data = eth_amr.copy()
        columns_to_display_with_labels = {
            'production_system':"Production System",
            'metric':"Metric",

            'value_usd':"Value (USD)",
            'upper_95pct_ci_usd':"Upper 95% confidence (USD)",
            'lower_95pct_ci_usd':"Lower 95% confidence (USD)",

            'value_birr':"Value (Birr)",
            'upper_95pct_ci_birr':"Upper 95% confidence (Birr)",
            'lower_95pct_ci_birr':"Lower 95% confidence (Birr)",
            }

        # ------------------------------------------------------------------------------
        # Hover-over text
        # ------------------------------------------------------------------------------
        column_tooltips = {
            'production_system':"Production System",
            }

        # ------------------------------------------------------------------------------
        # Format data to display in the table
        # ------------------------------------------------------------------------------
        # USD currency
        columns_to_format = [
            'value_usd',
            'upper_95pct_ci_usd',
            'lower_95pct_ci_usd',
        ]
        for column in columns_to_format:
            display_data[column] = display_data[column].apply(lambda x: '<not estimated>' if str(x) == 'nan' else f'$ {x:,.0f}')

        # Birr currency
        columns_to_format = [
            'value_birr',
            'upper_95pct_ci_birr',
            'lower_95pct_ci_birr',
        ]
        for column in columns_to_format:
            display_data[column] = display_data[column].apply(lambda x: '<not estimated>' if str(x) == 'nan' else f'{x:,.0f}')

    return [
        html.H4(f"{country_select} AMR Estimates"),
        dash_table.DataTable(
            columns=[{"name": j, "id": i} for i, j in columns_to_display_with_labels.items()],
            # fixed_rows={'headers': True, 'data': 0},
            data=display_data.to_dict('records'),
            export_format="csv",
            sort_action='native',
            style_cell={
                'font-family':'sans-serif',
                },
            style_table={'overflowX':'scroll',
                          'overflowY': 'auto'},
            page_action='none',

            # Hover-over for column headers
            tooltip_header=column_tooltips,
            tooltip_delay= 500,
            tooltip_duration=50000,

            # Underline columns with tooltips
            style_header_conditional=[{
                'if': {'column_id': col},
                'textDecoration': 'underline',
                'textDecorationStyle': 'dotted',
                } for col in list(column_tooltips)],
            )
        ]

# Denmark scenario table
# @gbadsDash.callback(
#     Output('den-scenario-table-todisplay', 'children'),
#     Input('select-case-study-countries-amu', 'value'),
#     )
# def update_den_scenario_table(country_select):
#     if country_select == 'Denmark':
#         display_data = den_amr_scenarios.copy()

#         # ------------------------------------------------------------------------------
#         # Hover-over text
#         # ------------------------------------------------------------------------------
#         column_tooltips = {
#             "Scenario":"Scenario",
#             "Disease Incidence":"Disease Incidence",
#             }

#         return [
#             html.H4("Denmark AMR Scenarios"),
#             dash_table.DataTable(
#                 data=display_data.to_dict('records'),
#                 export_format="csv",
#                 sort_action='native',
#                 style_cell={
#                     'font-family':'sans-serif',
#                     },
#                 style_table={'overflowX':'scroll',
#                               'overflowY': 'auto'},
#                 page_action='none',

#                 # Hover-over for column headers
#                 tooltip_header=column_tooltips,
#                 tooltip_delay= 500,
#                 tooltip_duration=50000,

#                 # Underline columns with tooltips
#                 style_header_conditional=[{
#                     'if': {'column_id': col},
#                     'textDecoration': 'underline',
#                     'textDecorationStyle': 'dotted',
#                     } for col in list(column_tooltips)],
#                 )
#             ]
#     elif country_select == 'Ethiopia':
#         return []

# ------------------------------------------------------------------------------
#### -- Figures
# ------------------------------------------------------------------------------
# AMU Map or Tree Map by regions
@gbadsDash.callback(
    Output('amu-map', 'figure'),
    Input('select-viz-switch-amu','value'),
    Input('select-map-display-drilldown-amu','value'),
    Input('select-antimicrobial-importance-class-amu','value'),
    Input('select-pathogens-amu','value'),
    Input('amu-regional-data', 'data'),
    )
def update_map_amu (viz_switch, quantity, antimicrobial_class, pathogens, input_json):
    input_df = amu2018_combined_tall.copy()
    input_df_amr = amr_withsmry.copy()
    input_df_am_expend = pd.read_json(StringIO(input_json), orient='split')

    # Filter scope to All and remove nulls from importance category
    input_df = input_df.query("scope == 'All'")

    # Filter AMR to just 2018, selected antimicrobial class and pathogen, and sort data by region
    # input_df_amr = input_df_amr.query("reporting_year == 2018").query(f"antimicrobial_class == '{antimicrobial_class}'").query(f"pathogen == '{pathogens}'")
    # Update: AMR data now includes only a single year selected for each region based on the most data available
    input_df_amr = input_df_amr.query(f"antimicrobial_class == '{antimicrobial_class}'").query(f"pathogen == '{pathogens}'")
    input_df_amr = input_df_amr.sort_values(by=['woah_region'])

    # Fix antimicrobial class names
    input_df = input_df.replace(['aggregated_class_data',
                                 'other_important',
                                 'sulfonamides__including_trimethoprim',
                                 'cephalosporins__all_generations',
                                 '1_2_gen__cephalosporins',
                                 '3_4_gen_cephalosporins',
                                 'other_quinolones'],
                                ['aggregated class data',
                                 'other (important)',
                                 'sulfonamides (with trimethoprim)',
                                 'cephalosporins (all gens)',
                                 'cephalosporins (1 & 2 gen)',
                                 'cephalosporins (3 & 4 gen)',
                                 'other quinolones'])

    # Convert antimicrobial classes to title case
    input_df.antimicrobial_class = input_df.antimicrobial_class.str.title()
    input_df.antimicrobial_class_group = input_df.antimicrobial_class_group.str.title()
    input_df.antimicrobial_class_group2 = input_df.antimicrobial_class_group2.str.title()

    # Use selected quantity value (AMU & AMR)
    if quantity == 'Antimicrobial usage: tonnes':
        value = input_df['amu_tonnes']
        map_value = input_df['amu_tonnes_by_region'] = input_df['amu_tonnes'].groupby(input_df['region']).transform('sum')
    elif quantity == 'Antimicrobial usage: mg per kg biomass':
        value = input_df['amu_mg_perkgbiomass']
        map_value = input_df['amu_mg_perkgbiomass_by_region'] = input_df['amu_mg_perkgbiomass'].groupby(input_df['region']).transform('sum')
    elif quantity == 'Biomass':
        map_value = input_df['biomass_total_kg_reporting']
    elif quantity == 'Antimicrobial Resistance (country level)':
        map_value = input_df_amr['overall_prev']
    elif quantity == 'Drug Resistance Index (region level)':
        map_value = input_df_am_expend['drug_resistance_index']
    elif quantity == 'Antimicrobial expenditure: total':
        map_value = input_df_am_expend['am_expenditure_usd_selected']
    elif quantity == 'Antimicrobial expenditure: per kg biomass':
        map_value = input_df_am_expend['am_expenditure_usd_perkg_selected']



    # Visualization switch between map and tree map
    if viz_switch == 'Map':

        # Create Map for AMR prevalence
        if quantity == 'Antimicrobial Resistance (country level)':
            if len(input_df_amr):
                amu_map_fig = px.scatter_geo(input_df_amr,
                                             locations="location_name",
                                             locationmode='country names',
                                             color="woah_region",
                                             hover_name="woah_region",
                                             size=map_value,
                                             projection="natural earth",
                                             custom_data=['woah_region',
                                                          map_value,
                                                          'location_name',
                                                          'antimicrobial_class',
                                                          'pathogen',
                                                          'sum_isolates'],
                                             color_discrete_map={"Asia, Far East and Oceania": 'rgb(102,197,204)',
                                                                 "Americas": 'rgb(248,156,116)',
                                                                 "Europe": 'rgb(220,176,242)',
                                                                 "Africa": 'rgb(135,197,95)',
                                                                 "Middle East": 'rgb(254,136,177)'}
                                             )

            else:
                amu_map_fig = go.Figure()
                amu_map_fig.update_layout(
                       xaxis =  { "visible": False },
                       yaxis = { "visible": False },
                       annotations = [
                           {
                               "text": "No data available, please choose a different antimicrobial or pathogen",
                               "xref": "paper",
                               "yref": "paper",
                               "showarrow": False,
                               "font": {
                                   "size": 28
                               }
                           }
                       ]
                   )

        elif quantity == 'Antimicrobial expenditure: total'\
            or quantity == 'Antimicrobial expenditure: per kg biomass'\
                or quantity == 'Drug Resistance Index (region level)':
            # Use create map defined above for AM expenditure
            amu_map_fig = create_map_display_amu(input_df_am_expend, map_value)
        else:
            # Use create map defined above for AMU
            amu_map_fig = create_map_display_amu(input_df, map_value)



        # Add title
        if quantity == 'Antimicrobial Resistance (country level)':
            amu_map_fig.update_layout(title_text=f'Global {quantity}<br><sup>{pathogens} pathogen(s) resistance to {antimicrobial_class} antimicrobials</sup>',
                                      font_size=15,
                                      plot_bgcolor="#ededed",)
        elif quantity == 'Drug Resistance Index (region level)':
            amu_map_fig.update_layout(title_text=f'{quantity}',
                                      font_size=15,
                                      plot_bgcolor="#ededed",)
        elif quantity == 'Antimicrobial expenditure: total':
            amu_map_fig.update_layout(title_text='Total Antimicrobial Expenditure by Region',
                                      font_size=15,
                                      plot_bgcolor="#ededed",)
        elif quantity == 'Antimicrobial expenditure: per kg biomass':
            amu_map_fig.update_layout(title_text= 'Antimicrobial Expenditure per kg Biomass by Region',
                                      font_size=15,
                                      plot_bgcolor="#ededed",)
        else:
            amu_map_fig.update_layout(title_text=f'Global {quantity}',
                                      font_size=15,
                                      plot_bgcolor="#ededed",)

        # Update legend title and location
        amu_map_fig.update_layout(legend=dict(
            title="Region",
            orientation="h",
            font=dict(size=12)
            ))

        # Update hoverover
        if quantity == 'Antimicrobial usage: tonnes':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "AMU: %{customdata[1]:,.0f} tonnes<br>" +
                                      "# of countries reporting: %{customdata[2]}" +
                                      "<extra></extra>",)
        elif quantity == 'Antimicrobial usage: mg per kg biomass':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "AMU: %{customdata[1]:,.0f} mg per kg biomass<br>" +
                                      "# of countries reporting: %{customdata[2]}" +
                                      "<extra></extra>",)
        elif quantity == 'Biomass':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "Biomass: %{customdata[1]:,.0f}<br>" +
                                      "# of countries reporting: %{customdata[2]}" +
                                      "<extra></extra>",)
        elif quantity == 'Antimicrobial Resistance (country level)':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "Country: %{customdata[2]}<br>" +
                                      "Overall prevalence: %{customdata[1]:,.1%}<br>" +
                                      "Total isolates: %{customdata[5]}<br>"
                                      'Antimicrobial Class: %{customdata[3]}<br>'+
                                      'Pathogen: %{customdata[4]}'
                                      "<extra></extra>",)
        elif quantity == 'Drug Resistance Index (region level)':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "Drug Resistance Index: %{customdata[1]:,.2f}" +
                                      "<extra></extra>",)
        elif quantity == 'Antimicrobial expenditure: total':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "Expenditure (USD): $%{customdata[1]:,.0f}" +
                                      "<extra></extra>",)
        elif quantity == 'Antimicrobial expenditure: per kg biomass':
            amu_map_fig.update_traces(hovertemplate=
                                      "<b>%{customdata[0]}</b><br>" +
                                      "Expenditure (USD): $%{customdata[1]:,.0f} per kg biomass" +
                                      "<extra></extra>",)


    else:
        # Add custom data for hoverover
        if quantity == 'Antimicrobial usage: tonnes':
            customdata = list(pd.DataFrame(['amu_tonnes']).to_numpy())
        elif quantity == 'Antimicrobial usage: mg per kg biomass':
            customdata = list(pd.DataFrame(['amu_mg_perkgbiomass_by_region']).to_numpy())

        # Determine which categorization to use
        if antimicrobial_class.upper() == 'WHO IMPORTANCE CATEGORIES':
            categories = 'who_importance_ctg'
            category_title = 'WHO importance categories'
        elif antimicrobial_class.upper() == 'ONEHEALTH IMPORTANCE CATEGORIES':
            categories = 'onehealth_importance_ctg'
            category_title = 'OneHealth importance categories'
        else:   # Default: WOAH categories
            categories = 'woah_importance_ctg'
            category_title = 'WOAH importance categories'

        # Use create map defined above
        amu_map_fig = create_tree_map_amu(input_df, value, categories)

        # treemap_hierarchy = ['region_with_countries_reporting', categories, 'antimicrobial_class']
        # if quantity == 'Antimicrobial usage: tonnes':
        #     amu_map_fig = create_treemap_withagg(
        #         input_df
        #         ,HIERARCHY=treemap_hierarchy
        #         ,COLOR_BY='region_with_countries_reporting'
        #         ,VALUE_VAR='amu_tonnes'
        #         )
        # elif quantity == 'Antimicrobial usage: mg per kg biomass':
        #     amu_map_fig = create_treemap_withagg(
        #         input_df
        #         ,HIERARCHY=treemap_hierarchy
        #         ,COLOR_BY='region_with_countries_reporting'
        #         ,VALUE_VAR='amu_mg_perkgbiomass'
        #         ,AGGREGATION='mean'
        #         ,WEIGHT_VAR='biomass_total_kg_reporting'
        #         )

        # Add title
        amu_map_fig.update_layout(title_text=f'{quantity} drill down by region and {category_title} | Countries reporting to WOAH',
                                  font_size=15,
                                  plot_bgcolor="#ededed",
                                  )

        # Update hoverover
        if quantity == 'Antimicrobial usage: tonnes':
            amu_map_fig.update_traces(customdata=customdata,
                hovertemplate=
                "<b>%{label}</b><br>" +
                "AMU total =  %{value:,.0f} tonnes<br>" +
                "Parent = %{parent}" +
                "<extra></extra>",)

        else:
            amu_map_fig.update_traces(customdata=customdata,
                hovertemplate=
                "<b>%{label}</b><br>" +
                "AMU total =  %{value:,.0f} mg per kg biomass<br>" +
                "Parent = %{parent}" +
                "<extra></extra>",)

        # Display value on box
        amu_map_fig.data[0].texttemplate = "%{label}<br>%{value:,.0f}"

    # Adjust margins
    amu_map_fig.update_layout(
        margin=dict(l=10, r=10, b=10),
        )


    return amu_map_fig


#AMU Stacked Bar by Tonnes
@gbadsDash.callback(
    Output('amu-stacked-bar', 'figure'),
    Input('select-classification-amu','value'),
    Input('select-quantity-amu-tonnes', 'value'),
    Input('select-amu-graph', 'value'),
    )

def update_stacked_bar_amu (classification, quantity, select_amu_graph):
    stackedbar_df = amu2018_combined_tall.copy()
    stackedbar_df = stackedbar_df.query("scope == 'All'").query("antimicrobial_class != 'total_antimicrobials'")

    # Workaround to fix names in legend
    stackedbar_df = stackedbar_df.replace(['aggregated_class_data', 'other_important', 'sulfonamides__including_trimethoprim'],
                                          ['aggregated class data', 'other (important)', 'sulfonamides (with trimethoprim)'])

    # Convert antimicrobial classes to title case
    stackedbar_df.antimicrobial_class = stackedbar_df.antimicrobial_class.str.title()
    stackedbar_df.antimicrobial_class_group = stackedbar_df.antimicrobial_class_group.str.title()
    stackedbar_df.antimicrobial_class_group2 = stackedbar_df.antimicrobial_class_group2.str.title()

    # Create region labels with proportion of biomass represented in countries reporting and adding a break
    stackedbar_df["region_with_countries_reporting"] = stackedbar_df['region'] \
            + '<br>' \
            + " (" + round(stackedbar_df['number_of_countries'] ,0).astype(int).astype(str) \
            + " | " + round(stackedbar_df['biomass_prpn_reporting'] * 100 ,1).astype(str) + "%)"

    x_var = 'region_with_countries_reporting'

    if quantity.upper() == 'TONNES':
        y_var = 'amu_tonnes'
    elif quantity.upper() == 'MG PER KG BIOMASS':
        y_var = 'amu_mg_perkgbiomass'

    # Define color sets
    color_map_impctg = {
        # WHO and WOAH categories
        "A: Critically Important": '#EF553B',
        "B: Highly Important": '#00CC96',
        "C: Other": '#636EFA',
        "D: Unknown": '#AB63FA',

        # OneHealth categories
        "Important": '#EF553B',
        "Other": '#636EFA',
        "Unknown": '#AB63FA'
        }
    color_map_indiv = {
        # Individual classes/top classes
        "Aggregated Class Data": '#636EFA',
        "Aminoglycosides": '#EF553B',
        "Amphenicols": '#00CC96',
        "Fluoroquinolones": '#AB63FA',
        "Macrolides": '#AAFFE1',
        "Other": '#C6CAFD',
        "Others": '#C6CAFD',
        "Other (Important)": '#FF6692',
        "Penicillins": '#FECB52',
        "Pleuromutilins": '#F7A799',
        "Polypeptides": '#FFA15A',
        "Sulfonamides (With Trimethoprim)": '#B6E880',
        "Tetracyclines": '#FF97FF',
        }

    if classification.upper() == 'WHO IMPORTANCE CATEGORIES':
        color = 'who_importance_ctg'
        color_map = color_map_impctg
        stackedbar_df['id'] = stackedbar_df.groupby(['who_importance_ctg']).ngroup()
    elif classification.upper() == 'WOAH IMPORTANCE CATEGORIES':
        color = 'woah_importance_ctg'
        color_map = color_map_impctg
        stackedbar_df['id'] = stackedbar_df.groupby(['woah_importance_ctg']).ngroup()
    elif classification.upper() == 'ONEHEALTH IMPORTANCE CATEGORIES':
        color = 'onehealth_importance_ctg'
        color_map = color_map_impctg
        stackedbar_df['id'] = stackedbar_df.groupby(['onehealth_importance_ctg']).ngroup()
    elif classification.upper() == 'INDIVIDUAL CLASSES':
        color = 'antimicrobial_class_group'
        color_map = color_map_indiv
        stackedbar_df['id'] = stackedbar_df.groupby(['antimicrobial_class']).ngroup()
        # stackedbar_df['id'] = stackedbar_df.groupby(['antimicrobial_class_group']).ngroup()
    elif classification.upper() == 'TOP GLOBAL CLASSES':
        color = 'antimicrobial_class_group2'
        color_map = color_map_indiv
        stackedbar_df['id'] = stackedbar_df.groupby(['antimicrobial_class_group2']).ngroup()

    # Options to change between graphs
    if select_amu_graph.upper() == 'TOTAL':
        amu_bar_fig = px.histogram(stackedbar_df,
                                   x=x_var,
                                   y=y_var,
                                   color=color,
                                   color_discrete_map=color_map,
                                   labels={
                                       x_var: "",
                                       "who_importance_ctg": "WHO Importance Category",
                                       "woah_importance_ctg": "WOAH Importance Category",
                                       "onehealth_importance_ctg": "OneHealth Importance Category",
                                       "antimicrobial_class_group": "Antimicrobial Class",
                                       "antimicrobial_class_group2": "Antimicrobial Class"
                                       }
                                   )

        # Add title
        amu_bar_fig.update_layout(title_text=f'Regional AMU {quantity} by {classification}<br><sup>for countries reporting to WOAH</sup>',
                                  font_size=15,
                                  plot_bgcolor="#ededed",
                                  )
        amu_bar_fig.update_yaxes(title_text=f"AMU {quantity}")

        # # TODO: WIP for layout adjustments
        # amu_bar_fig = go.Figure()

        # amu_bar_fig.add_trace(go.Bar(
        #                       x=stackedbar_df['region'],
        #                       y=stackedbar_df['amu_tonnes'],
        #                       marker=dict(color = stackedbar_df['id']),
        #                       ))

        # amu_bar_fig.update_layout({'title' : 'Stacked Bar'})

        # amu_bar_fig.layout.update(
        #    updatemenus = [
        #       go.layout.Updatemenu(
        #          type = "buttons", direction = "left", buttons=list(
        #             [
        #                dict(args = [{"type":"bar"},
        #                             {"title":"Stacked Bar"}], label = "Bar", method = "update"),
        #                dict(args = [{"type":"violin"},
        #                             {"title":"Violin"}], label = "Violin", method = "update")
        #             ]
        #          ),
        #          pad = {"r": 10, "t": 10},
        #          showactive = True,
        #          x = 0.19,
        #          xanchor = "left",
        #          y = 1.12,
        #          yanchor = "top"
        #       ),
        #    ]
        # )

        # # Add annotation
        # amu_bar_fig.update_layout(
        #     annotations=[
        #         dict(text="Graph type:", showarrow=False,
        #                               x=0, y=1.08, yref="paper", align="left")
        #     ]
        # )

    elif select_amu_graph.upper() == 'PERCENT':
        amu_bar_fig = px.histogram(
            stackedbar_df,
            x=x_var,
            y=y_var,
            color=color,
            color_discrete_map=color_map,
            barnorm='percent',
            text_auto='.1f',
            labels={
                x_var: "",
                "antimicrobial_class_group": "Antimicrobial Class"
                }
            )

         # Add titles
        amu_bar_fig.update_layout(title_text=f'Regional Percent of AMU {quantity} by {classification}<br><sup>for countries reporting to WOAH</sup>',
                                  font_size=15,
                                  plot_bgcolor="#ededed",
                                  )
        amu_bar_fig.update_yaxes(title_text=f"% of AMU {quantity}")

    # Remove legend (share with donut chart)
    amu_bar_fig.update_layout(showlegend=False)

    # Adjust margins
    amu_bar_fig.update_layout(
        margin=dict(l=20, r=20, b=20),
        )

    return amu_bar_fig

# AMU Donut chart
@gbadsDash.callback(
    Output('amu-donut-chart', 'figure'),
    Input('select-quantity-amu-tonnes','value'),
    Input('select-region-amu','value'),
    Input('select-classification-amu', 'value'),
    )
def update_donut_chart_amu (quantity, region, classification):
    input_df = amu2018_combined_tall.copy()

    # Workaround to fix names in legend
    input_df = input_df.replace(['aggregated_class_data', 'other_important', 'sulfonamides__including_trimethoprim'],
                                ['Aggregated Class Data', 'Other (Important)', 'Sulfonamides (With Trimethoprim)'])

    # Convert antimicrobial classes to title case
    input_df.antimicrobial_class_group = input_df.antimicrobial_class_group.str.title()
    input_df.antimicrobial_class_group2 = input_df.antimicrobial_class_group2.str.title()

    # Filter scope to All and remove nulls from importance category
    # Filter by region selected
    if region == 'All':
        selected_region = 'Global'
    else:
        selected_region = f'{region}'
        input_df = input_df.loc[(input_df['region'] == region)]

    # Use selected classification value
    if classification == 'Individual Classes':
        summarize_df = input_df.query("scope == 'All'").groupby('antimicrobial_class_group')[['amu_tonnes' ,'biomass_total_kg_reporting']].sum().reset_index()
        sort_by = 'antimicrobial_class'
        legend_title = 'Antimicrobial Class'
        names = summarize_df['antimicrobial_class_group']
        # Set colors to sync across visuals
        colors = {
        "Aggregated Class Data": '#636EFA',
        "Aminoglycosides": '#EF553B',
        "Amphenicols": '#00CC96',
        "Fluoroquinolones": '#AB63FA',
        "Macrolides": '#AAFFE1',
        "Other": '#C6CAFD',
        "Other (Important)": '#FF6692',
        "Penicillins": '#FECB52',
        "Pleuromutilins": '#F7A799',
        "Polypeptides": '#FFA15A',
        "Sulfonamides (With Trimethoprim)": '#B6E880',
        "Tetracyclines": '#FF97FF',
        }
        summarize_df['Color']= summarize_df['antimicrobial_class_group'].map(colors)

    elif classification == 'WHO Importance Categories':
        summarize_df = input_df.query("scope == 'All'").groupby('who_importance_ctg')[['amu_tonnes' ,'biomass_total_kg_reporting']].sum().reset_index()
        sort_by = 'who_importance_ctg'
        legend_title = 'WHO Importance Category'
        names = summarize_df['who_importance_ctg']
        # Set colors to sync across visuals
        colors = {
        "A: Critically Important": "#EF553B",
        "B: Highly Important": "#00CC96",
        "C: Other": "#636EFA",
        "D: Unknown": "#AB63FA",
        }
        summarize_df['Color']= summarize_df['who_importance_ctg'].map(colors)

    elif classification == 'WOAH Importance Categories':
        summarize_df = input_df.query("scope == 'All'").groupby('woah_importance_ctg')[['amu_tonnes' ,'biomass_total_kg_reporting']].sum().reset_index()
        sort_by = 'woah_importance_ctg'
        legend_title = 'WOAH Importance Category'
        names = summarize_df['woah_importance_ctg']
        # Set colors to sync across visuals
        colors = {
        "A: Critically Important": "#EF553B",
        "B: Highly Important": "#00CC96",
        "C: Other": "#636EFA",
        "D: Unknown": "#AB63FA",
        }
        summarize_df['Color']= summarize_df['woah_importance_ctg'].map(colors)

    elif classification == 'OneHealth Importance Categories':
        summarize_df = input_df.query("scope == 'All'").groupby('onehealth_importance_ctg')[['amu_tonnes' ,'biomass_total_kg_reporting']].sum().reset_index()
        sort_by = 'onehealth_importance_ctg'
        legend_title = 'OneHealth Importance Category'
        names = summarize_df['onehealth_importance_ctg']
        # Set colors to sync across visuals
        colors = {
        "Important": "#EF553B",
        "Other": "#636EFA",
        "Unknown": "#AB63FA",
        }
        summarize_df['Color']= summarize_df['onehealth_importance_ctg'].map(colors)

    elif classification == 'Top Global Classes':
        summarize_df = input_df.query("scope == 'All'").groupby('antimicrobial_class_group2')[['amu_tonnes' ,'biomass_total_kg_reporting']].sum().reset_index()
        sort_by = 'antimicrobial_class_group2'
        legend_title = 'Top Global Classes'
        names = summarize_df['antimicrobial_class_group2']
        # Set colors to sync across visuals
        colors = {
        "Macrolides": '#AAFFE1',
        "Penicillins": '#FECB52',
        "Tetracyclines": '#FF97FF',
        "Others": '#C6CAFD'
        }
        summarize_df['Color']= summarize_df['antimicrobial_class_group2'].map(colors)

    # Use selected quantity value
    if quantity == 'Tonnes':
        value = summarize_df['amu_tonnes']
    else:
        summarize_df['amu_mg_perkgbiomass'] = (summarize_df['amu_tonnes'] / summarize_df['biomass_total_kg_reporting']) * 1e9
        value = summarize_df['amu_mg_perkgbiomass']


    # Sort the data by classification to sync the legends across the visualizations
    input_df = input_df.sort_values(by=sort_by)

    # Use create donut chart defined above
    amu_donut_fig = create_donut_chart_amu(summarize_df, value, names)

    # Add title and legend title
    amu_donut_fig.update_layout(title_text=f'{selected_region} AMU {quantity} by {classification}<br><sup>for countries reporting to WOAH</sup>',
                                  font_size=15,
                                  plot_bgcolor="#ededed",
                                  # Add annotations in the center of the donut pies.
                                  annotations=[dict(text=f'{quantity}',
                                                    x=0.5,
                                                    y=0.5,
                                                    font_size=15,
                                                    showarrow=False),
                                              ],
                                  legend_title_text=f'{legend_title}'
                                  )

    # Sync colors across visuals
    amu_donut_fig.update_traces(marker=dict(colors=summarize_df['Color']))

    # Standardize number of decimal places displayed
    amu_donut_fig.update_traces(texttemplate='%{percent:.1%}')

    # Legend font smaller to not touch the graph
    amu_donut_fig.update_layout(legend=dict(
        font=dict(size=14),
        bgcolor='rgba(0,0,0,0)', # makes legend background transparent
        ))

    # Adjust margins and move legend to left
    amu_donut_fig.update_layout(
        margin=dict(l=20, r=20, b=20),
        legend_x=-.5,
        )

    return amu_donut_fig

# Comparing usage estimates
@gbadsDash.callback(
    Output('am-usage-comparison','figure'),
    Input('amu-regional-data', 'data'),
    Input('select-usage-units-amu' ,'value'),
    )
def update_am_usage_comparison(input_json, units):
    input_df = pd.read_json(StringIO(input_json), orient='split')

    # Recalculate units if needed
    if units == 'mg per kg biomass':
        input_df['terr_amu_tonnes_reporting_2020'] = 1e9 * input_df['terr_amu_tonnes_reporting_2020'] / input_df['biomass_terr_kg_region']
        input_df['terr_amu_tonnes_region_2020'] = 1e9 * input_df['terr_amu_tonnes_region_2020'] / input_df['biomass_terr_kg_region']
        input_df['terr_amu_tonnes_mulch_2020'] = 1e9 * input_df['terr_amu_tonnes_mulch_2020'] / input_df['biomass_terr_kg_region']

        yaxis_title = 'Antimicrobial Usage (mg per kg biomass)'
    else:   # Otherwise use columns as they are
        yaxis_title = 'Antimicrobial Usage (tonnes)'

    # Rename columns to plot
    # Workaround to fix names in legend
    rename_plot_cols = {
        'terr_amu_tonnes_reporting_2020':'A*'
        ,'terr_amu_tonnes_region_2020':'B*'
        ,'terr_amu_tonnes_mulch_2020':'C*'
        }
    input_df = input_df.rename(columns=rename_plot_cols)

    # Set custom colors to sync across all visuals
    colors = {"Asia, Far East and Oceania": 'rgb(102,197,204)',
              "Americas": 'rgb(248,156,116)',
              "Europe": 'rgb(220,176,242)',
              "Africa": 'rgb(135,197,95)',
              "Middle East": 'rgb(254,136,177)'}
    input_df['Color']= input_df['region'].map(colors)

    bar_fig = go.Figure(data=[
        go.Bar(name='A*', x=input_df['region'], y=input_df["A*"], marker_pattern_shape="x", marker_color="black",text=input_df["A*"]),
        go.Bar(name='B*', x=input_df['region'], y=input_df["B*"], marker_pattern_shape=".",text=input_df["B*"]),
        go.Bar(name='C*', x=input_df['region'], y=input_df["C*"], marker_pattern_shape="+",text=input_df["C*"]),
    ])
    # Change the bar mode
    bar_fig.update_layout(barmode='group')

    # Sync colors across visuals and update text
    bar_fig.update_traces(marker=dict(color=input_df['Color'],
                                       pattern_fgcolor='black',
                                       pattern_bgcolor='white',
                                      ),
                          texttemplate='%{text:,.0f}',
                          textposition="outside",
                          textfont = {'size': 11,},
                          cliponaxis=False)

    bar_fig.update_layout(title_text='Comparing reported antimicrobial usage to other estimates<br><sup>Terrestrial Livestock',
                          font_size=15,
                          legend=dict(
                              title="",
                              orientation="h",
                              # Top
                                x=0.7,
                                y=1.20,
                              font=dict(size=15)
                              )
                          )

    bar_fig.update_xaxes(title_text=''
                         ,tickangle=20
                         )
    bar_fig.update_yaxes(title_text=yaxis_title)

    return bar_fig

# Comparing price estimates
@gbadsDash.callback(
    Output('am-price-comparison','figure'),
    Input('amu-regional-data', 'data'),
    )
def update_am_price_comparison(input_json):
    input_df = pd.read_json(StringIO(input_json), orient='split')

    # Set custom colors to sync across all visuals
    colors = {"Asia, Far East and Oceania": 'rgb(102,197,204)',
              "Americas": 'rgb(248,156,116)',
              "Europe": 'rgb(220,176,242)',
              "Africa": 'rgb(135,197,95)',
              "Middle East": 'rgb(254,136,177)'}
    # colors_list_for_errors = ['rgb(135,197,95)', 'rgb(248,156,116)', 'rgb(102,197,204)', 'rgb(220,176,242)', 'rgb(254,136,177)']
    input_df['Color']= input_df['region'].map(colors)

    # Calculate errors as difference between endpoints and midpoint
    input_df['am_price_usdpertonne_high_err'] = input_df['am_price_usdpertonne_high'] - input_df['am_price_usdpertonne_mid']
    input_df['am_price_usdpertonne_low_err'] = input_df['am_price_usdpertonne_mid'] - input_df['am_price_usdpertonne_low']

    # Create figure with secondary y-axis
    fig = make_subplots()

    # Plot Price
    fig.add_trace(
        go.Scatter(
             x=input_df['region']
             ,y=input_df['am_price_usdpertonne_mid']
            ,marker=dict(color=input_df['Color'])
             ,error_y=dict(
                type='data'
                ,symmetric=False
                ,array=input_df['am_price_usdpertonne_high_err']
                ,arrayminus=input_df["am_price_usdpertonne_low_err"]
            ),
            mode="markers+text",
        )
    )

    # Set size of points
    fig.update_traces(marker_size=10)

    # Add plot title and axis labels
    fig.update_layout(title_text='Comparing antimicrobial price estimates'
                      ,font_size=15
                      )
    fig.update_xaxes(title_text=""
                     ,tickangle=20
                     )
    fig.update_yaxes(title_text="Average Price (USD per tonne)")
    return fig

# Expenditure based on usage and price sliders
@gbadsDash.callback(
    Output('amu-expenditure','figure'),
    Input('amu-regional-data', 'data'),
    Input('select-expenditure-units-amu', 'value'),
    )
def update_expenditure_amu(input_json, expenditure_units):
    input_df = pd.read_json(StringIO(input_json), orient='split')

    # Set the units based on the expenditure selected
    if expenditure_units == 'per kg biomass':
        y='am_expenditure_usd_perkg_selected'
    else:
        y='am_expenditure_usd_selected'

    bar_fig = px.bar(
        input_df,
        x='region',
        y=y,
        text_auto='$,.5r',
        labels={
            'am_expenditure_usd_selected':'Expenditure (USD)',
            'am_expenditure_usd_perkg_selected':'Expenditure per kg biomass (USD)',
            },
        color="region",
        color_discrete_map={"Asia, Far East and Oceania": 'rgb(102,197,204)',
                            "Americas": 'rgb(248,156,116)',
                            "Europe": 'rgb(220,176,242)',
                            "Africa": 'rgb(135,197,95)',
                            "Middle East": 'rgb(254,136,177)'}
        )

    # Add title and hide legend
    bar_fig.update_layout(title_text='Estimated Antimicrobial Expenditure<br><sup>Terrestrial Livestock',
                          showlegend=False)

    # Adjust margins
    bar_fig.update_layout(
        margin=dict(l=20, r=20, b=10),
        )

    bar_fig.update_xaxes(title_text=""
                     ,tickangle=20
                     )

    return bar_fig

# AMU for terrestrial animals, with uncertainty
# @gbadsDash.callback(
#     Output('amu-terr-error-usage','figure'),
#     Input('select-region-amu','value'),
#     )
# def update_terrestrial_usage_amu(dummy_input):
#     # Prep data
#     # This is a hack to get the Usage and Price scatterplots separated
#     usage_cols = ['amu_terrestrial_tonnes_min' ,'amu_terrestrial_tonnes_mostlikely' ,'amu_terrestrial_tonnes_max']
#     price_cols = ['amu_eurospertonne_min' ,'amu_eurospertonne_mostlikely' ,'amu_eurospertonne_max']
#     amu_regions = list(amu_uncertainty_data['region'])

#     amu_uncertainty_data_toplot_usage = amu_uncertainty_data.copy()
#     amu_uncertainty_data_toplot_usage[price_cols] = np.nan

#     amu_uncertainty_data_toplot_price = amu_uncertainty_data.copy()
#     amu_uncertainty_data_toplot_price[usage_cols] = np.nan
#     amu_uncertainty_data_toplot_price['region'] = amu_uncertainty_data_toplot_price['region'] + '_price'

#     amu_uncertainty_data_toplot = pd.concat([amu_uncertainty_data_toplot_usage ,amu_uncertainty_data_toplot_price] ,axis=0 ,ignore_index=True)
#     amu_uncertainty_data_toplot = amu_uncertainty_data_toplot.sort_values(by='region')

#     # Create figure with secondary y-axis
#     fig = make_subplots(specs=[[{"secondary_y": True}]])

#     # Plot Usage
#     fig.add_trace(
#         go.Scatter(
#              x=amu_uncertainty_data_toplot['region']
#              ,y=amu_uncertainty_data_toplot['amu_terrestrial_tonnes_mostlikely']
#              ,error_y=dict(
#                 type='data'
#                 ,symmetric=False
#                 ,array=amu_uncertainty_data_toplot['amu_terrestrial_tonnes_errorhigh']
#                 ,arrayminus=amu_uncertainty_data_toplot["amu_terrestrial_tonnes_errorlow"]
#             )
#             ,mode='markers'
#             ,name='Usage'
#             ,marker_color='blue'
#         )
#         ,secondary_y=False
#     )

#     # Plot Price
#     fig.add_trace(
#         go.Scatter(
#              x=amu_uncertainty_data_toplot['region']
#              ,y=amu_uncertainty_data_toplot['amu_eurospertonne_mostlikely']
#              ,error_y=dict(
#                 type='data'
#                 ,symmetric=False
#                 ,array=amu_uncertainty_data_toplot['amu_eurospertonne_errorhigh']
#                 ,arrayminus=amu_uncertainty_data_toplot["amu_eurospertonne_errorlow"]
#             )
#             ,mode='markers'
#             ,name='Price'
#             ,marker_color='green'
#         )
#         ,secondary_y=True
#     )

#     # Set size of points
#     fig.update_traces(marker_size=10)

#     # Add plot title and axis labels
#     fig.update_layout(
#         title_text='Antimicrobial Usage and Price for Terrestrial Livestock<br><sup>with 95% confidence intervals</sup>'
#         ,font_size=15
#         ,legend_y=1.1
#         ,legend_x=0.6
#         ,legend_orientation='h'
#     )
#     fig.update_xaxes(title_text="Region"
#                      ,tickangle=45
#                      ,tickmode='array'
#                      ,tickvals=amu_regions  # Only show ticks for base regions, not dummy price regions
#                      )
#     fig.update_yaxes(title_text="Antimicrobial Usage (tonnes)"
#                       ,color='blue'
#                       ,secondary_y=False
#                       )
#     fig.update_yaxes(title_text="Antimicrobial Price (euros per tonne)"
#                       ,color='green'
#                       ,secondary_y=True
#                       ,showgrid=False
#                       )

#     return fig

# AM expenditure for terrestrial animals, with uncertainty
# @gbadsDash.callback(
#     Output('amu-terr-error-expenditure','figure'),
#     Input('select-region-amu','value'),
#     )
# def update_terrestrial_expenditure_amu(dummy_input):
#     fig = px.scatter(
#         amu_uncertainty_data
#          ,x='region'
#          ,y='amu_terrestrial_expenditure_midpoint'
#          ,error_y='amu_terrestrial_expenditure_errorhigh', error_y_minus="amu_terrestrial_expenditure_errorlow"
#         ,labels={"amu_terrestrial_expenditure_midpoint":"Total Expenditure on Antimicrobials (Euros)"}
#     )
#     fig.update_traces(marker_size=10 ,marker_color='red')

#     # Add title
#     fig.update_layout(
#         title_text='Antimicrobial Expenditure for Terrestrial Livestock<br><sup>with 95% confidence intervals</sup>'
#         ,font_size=15
#         ,plot_bgcolor="#ededed"
#     )
#     fig.update_xaxes(title_text="Region"
#                       ,tickangle=45
#                       )

#     return fig

# # Denmark top level AHLE and AMR number printout
# @gbadsDash.callback(
#     Output('den-ahle-amr-totals-printout', 'children'),
#     Input('select-scenario-den-amu', 'value'),
#     )
# def update_toplevel_numbers_den_amr(scenario_select_num):
    # scenario_select = scenario_codes[scenario_select_num]

#     input_df = den_amr_ahle_final_poplvl_sorted.query(f"scenario == '{scenario_select}'").query("farm_type == 'Total'")

#     # Get important values to show in title
#     population_amr_prod = input_df.query("metric == 'AMR production losses'")['value'].item()
#     population_amr_health = input_df.query("metric == 'AMR health expenditure'")['value'].item()
#     population_amr_total = population_amr_prod + population_amr_health
#     population_unattr_ahle = input_df.query("metric == 'Unattributed AHLE'")['value'].item()
#     population_total_ahle = population_amr_total + population_unattr_ahle
#     population_amr_prpn_ahle = population_amr_total / population_total_ahle

#     return html.Div([
#         html.H6(f"Total AHLE: {population_total_ahle :,.0f} DKK"),
#         html.H6(f"Total AMR: {population_amr_total :,.0f} DKK ({population_amr_prpn_ahle:.1%} of total AHLE)")
#         ])

# Denmark AMR treemap
## JR: Hiding farm-level results to focus on population-level
# @gbadsDash.callback(
#     Output('den-amr-treemap-farmlvl', 'figure'),
#     Input('select-expenditure-units-amu', 'value'),     # Dummy input for testing (not used)
#     # Input('select-amr-scenario', 'value'),    # Actual input (control not yet created)
#     )
# def update_den_amr_treemap_farmlvl(dummy_input):
#     input_df = den_amr_ahle_farmlvl.query("scenario == 'Average'").query("farm_type != 'Total'")
#     treemap_fig = create_tree_map_den(input_df)
#     treemap_fig.update_layout(
#         title_text=f'Farm-level AHLE and the Burden of Antimicrobial Resistance (AMR)<br>by Farm Type',
#         font_size=15,
#         margin=dict(l=10, r=10, b=10),
#         )
#     return treemap_fig

# @gbadsDash.callback(
#     Output('den-amr-treemap-poplvl', 'figure'),
#     Input('select-expenditure-units-amu', 'value'),     # Dummy input for testing (not used)
#     # Input('select-amr-scenario', 'value'),    # Actual input (control not yet created)
#     )
# def update_den_amr_treemap_poplvl(dummy_input):
#     input_df = den_amr_ahle_poplvl.query("scenario == 'Average'").query("farm_type != 'Total'")
#     treemap_fig = create_tree_map_den(input_df)
#     treemap_fig.update_layout(
#         title_text=f'Population-level AHLE and the Burden of Antimicrobial Resistance (AMR)<br>by Farm Type',
#         font_size=15,
#         margin=dict(l=10, r=10, b=10),
#         )
#     return treemap_fig


# # Denmark AMR sunburst chart - population level
# @gbadsDash.callback(
#     Output('den-amr-sunburst-poplvl', 'figure'),
#     Input('select-case-study-diseases-amu','value'),
#     # Input('select-amr-scenario', 'value'),    # Actual input (control not yet created)
#     )
# def update_sunburst_poplvl_den_amr(disease_select):
#     input_df = den_amr_ahle_poplvl.query("scenario == 'Average'").query("farm_type != 'Total'")
#     sunburst_fig = create_sunburst_den(input_df)
#     sunburst_fig.update_layout(
#         title_text=f'Population-level AHLE and the Burden of AMR in {disease_select} <br>by Farm Type',
#         font_size=15,
#         margin=dict(l=10, r=10, b=10),
#         )
#     return sunburst_fig

# # Denmark AMR sunburst chart - farm level
# @gbadsDash.callback(
#     Output('den-amr-sunburst-farmlvl', 'figure'),
#     Input('select-case-study-diseases-amu','value'),
#     # Input('select-amr-scenario', 'value'),    # Actual input (control not yet created)
#     )
# def update_sunburst_farmlvl_den_amr(disease_select):
#     input_df = den_amr_ahle_farmlvl.query("scenario == 'Average'").query("farm_type != 'Total'")
#     sunburst_fig = create_sunburst_den(input_df)
#     sunburst_fig.update_layout(
#         title_text=f'Farm-level AHLE and the Burden of AMR in {disease_select} <br>by Farm Type',
#         font_size=15,
#         margin=dict(l=10, r=10, b=10),
#         )
#     return sunburst_fig

# This callback serves as a traffic director, calling the appropriate plotting function
# depending on which country is selected.
@gbadsDash.callback(
    Output('case-study-amr-barchart-poplvl', 'figure'),
    Input('select-case-study-countries-amu', 'value'),
    Input('select-case-study-amu-metric-display', 'value'),
    Input('select-case-study-amu-bar-scale', 'value'),
    Input('select-case-study-diseases-amu', 'value'),
    Input('select-scenario-den-amu', 'value'),
    Input('select-case-study-graphic-display-option', 'value'),
    Input('select-case-study-currency-amu', 'value'),
    )
def update_barchart_poplvl(
        country_select
        ,option_tot_pct
        ,option_axis_scale
        ,disease_select
        ,scenario_select_num
        ,farmtype_select
        ,currency_select
    ):
    if country_select == 'Denmark':
        barchart_fig = create_barchart_poplvl_den_amr(
            option_tot_pct
            ,option_axis_scale
            ,disease_select
            ,scenario_select_num
            ,farmtype_select
            ,currency_select
            )
    elif country_select == 'Ethiopia':
        barchart_fig = create_barchart_poplvl_eth_amr(
            option_tot_pct
            ,option_axis_scale
            ,disease_select
            ,currency_select
            )

    return barchart_fig

# # Pie chart based on country seletion
# @gbadsDash.callback(
#     Output('case-study-amr-piechart-poplvl', 'figure'),
#     Input('select-case-study-countries-amu', 'value'),
#     Input('select-scenario-den-amu', 'value'),
#     Input('select-case-study-diseases-amu', 'value'),
#     Input('select-case-study-currency-amu', 'value'),
#     Input('select-case-study-graphic-display-option', 'value'),
#     )
# def update_piechart_poplvl(
#         country_select,
#         scenario_select_num,
#         disease_select,
#         currency_select,
#         farmtype_select,
#     ):
#     if country_select == 'Denmark':
#         piechart_fig = create_case_study_piechart_den_poplvl(
#             scenario_select_num,
#             disease_select,
#             currency_select,
#             farmtype_select,
#             )
#     elif country_select == 'Ethiopia':
#         piechart_fig = create_case_study_piechart_eth_poplvl(
#             disease_select,
#             currency_select,
#             )

#     return piechart_fig

# # Denmark AMR bar chart - farm level
# @gbadsDash.callback(
#     Output('den-amr-barchart-farmlvl', 'figure'),
#     Input('select-case-study-amu-metric-display', 'value'),
#     Input('select-case-study-amu-bar-scale', 'value'),
#     Input('select-case-study-diseases-amu','value'),
#     # Input('select-amr-scenario', 'value'),    # Control not yet created
#     )
# def update_barchart_farmlvl_den_amr(option_tot_pct, option_axis_scale, disease_select):
#     input_df = den_amr_ahle_farmlvl.query("scenario == 'Average'").query("farm_type != 'Total'")

#     if option_axis_scale == 'Unit':
#         set_log_y = False
#     elif option_axis_scale == 'Log':
#         set_log_y = True

#     if option_tot_pct == 'Total':
#         barchart_fig = px.bar(
#             input_df
#             ,x='farm_type'
#             ,y='value'
#             ,color='metric'
#             ,color_discrete_map={
#                 'Unattributed AHLE':'#fbc98e',
#                 'AMR':'#31BFF3'}
#             ,barmode='relative'
#             ,log_y=set_log_y
#             ,labels={
#                 "metric":"Source of Burden"
#                 ,"farm_type":"Farm Type"
#                 ,"value":"Burden (DKK)"
#                 }
#             ,pattern_shape='farm_type'
#             ,pattern_shape_sequence=[".", "\\", "|"]
#             )
#         barchart_fig.update_layout(
#             title_text=f'Farm-level AHLE and the Burden of AMR in {disease_select}<br>by Farm Type',
#             font_size=15,
#             showlegend=False,  # Hide the default legend
#             margin=dict(r=200)  # Adjust right margin to account for custom legend
#         )

#         # Add custom legend annotations with colored squares
#         legend_items = [
#             {'label': 'Unattributed AHLE', 'color': '#fbc98e'},
#             {'label': 'AMR', 'color': '#31BFF3'}
#         ]

#         y_pos = 0.95  # Starting y position for legend items

#         # Legend title position
#         barchart_fig.add_annotation(
#             x=1.05,
#             y=y_pos + 0.05,
#             xref="paper",
#             yref="paper",
#             text="Source of Burden",
#             showarrow=False,
#             font=dict(size=16, color="black"),
#             xanchor="left",
#             yanchor="top"
#         )
#         y_pos -= 0.05 # Move the start of the legend down after adding the title
#         for item in legend_items:
#             barchart_fig.add_shape(
#                 type="rect",
#                 x0=1.02,
#                 y0=y_pos - 0.02,
#                 x1=1.04,
#                 y1=y_pos,
#                 xref="paper",
#                 yref="paper",
#                 fillcolor=item['color'],
#                 line=dict(color="black", width=1)
#             )
#             barchart_fig.add_annotation(
#                 x=1.05,
#                 y=y_pos - 0.01,
#                 xref="paper",
#                 yref="paper",
#                 text=item['label'],
#                 showarrow=False,
#                 font=dict(size=14),
#                 xanchor="left",
#                 yanchor="middle"
#             )
#             y_pos -= 0.05  # Adjust spacing between legend items

#     elif option_tot_pct == 'Percent':
#         barchart_fig = px.histogram(
#             input_df,
#             x='farm_type',
#             y='value',
#             log_y=set_log_y,
#             color='metric',
#             color_discrete_map={
#                 'Unattributed AHLE':'#fbc98e',
#                 'AMR':'#31BFF3'},
#             barnorm='percent',
#             pattern_shape='farm_type',
#             pattern_shape_sequence=[".", "\\", "|"],
#             text_auto='.1f',
#             )
#         barchart_fig.update_layout(
#             title_text=f'Farm-level AHLE and the Burden of AMR in {disease_select}<br>by Farm Type',
#             font_size=15,
#             xaxis_title='Farm Type',
#         	yaxis_title='% of AHLE',
#             showlegend=False,  # Hide the default legend
#             margin=dict(r=200)  # Adjust right margin to account for custom legend
#         )

#         # Add custom legend annotations with colored squares
#         legend_items = [
#             {'label': 'Unattributed AHLE', 'color': '#fbc98e'},
#             {'label': 'AMR', 'color': '#31BFF3'}
#         ]

#         y_pos = 0.95  # Starting y position for legend items

#         # Legend title position
#         barchart_fig.add_annotation(
#             x=1.05,
#             y=y_pos + 0.05,
#             xref="paper",
#             yref="paper",
#             text="Source of Burden",
#             showarrow=False,
#             font=dict(size=16, color="black"),
#             xanchor="left",
#             yanchor="top"
#         )
#         y_pos -= 0.05 # Move the start of the legend down after adding the title
#         for item in legend_items:
#             barchart_fig.add_shape(
#                 type="rect",
#                 x0=1.02,
#                 y0=y_pos - 0.02,
#                 x1=1.04,
#                 y1=y_pos,
#                 xref="paper",
#                 yref="paper",
#                 fillcolor=item['color'],
#                 line=dict(color="black", width=1)
#             )
#             barchart_fig.add_annotation(
#                 x=1.05,
#                 y=y_pos - 0.01,
#                 xref="paper",
#                 yref="paper",
#                 text=item['label'],
#                 showarrow=False,
#                 font=dict(size=14),
#                 xanchor="left",
#                 yanchor="middle"
#             )
#             y_pos -= 0.05  # Adjust spacing between legend items


#     return barchart_fig

#%% 6. RUN APP
#############################################################################################################

if __name__ == "__main__":
    # NOTE: These statements are not executed when in gunicorn, because in gunicorn this program is loaded as module

    # use_port = fa.get_open_port()  # selects first unused port >= 8050
    use_port = 8050                 # set to fixed fixed number

    fa.run_server(app, use_port, debug=True)

def returnApp():
    """
    This function is used to create the app and return it to waitress in the docker container
    """
    # If BASE_URL is set, use DispatcherMiddleware to serve the app from that path
    if 'BASE_URL' in os.environ:
        from werkzeug.middleware.dispatcher import DispatcherMiddleware
        app.wsgi_app = DispatcherMiddleware(Flask('dummy_app'), {
            os.environ['BASE_URL']: app.server
        })
        # Added redirect to new path
        @app.wsgi_app.app.route('/')
        def redirect_to_dashboard():
            return redirect(os.environ['BASE_URL'])
        return app.wsgi_app

    # If no BASE_URL is set, just return the app server
    return app.server
